import asyncio
import aiohttp
from datetime import datetime, timedelta
import json

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API
API_VERSION = "v19.0"
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"
LINK_CLICK_ACTION_TYPE = "link_click"

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None, access_token: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Graph API."""
    params = params or {}
    params["access_token"] = access_token
    async with session.get(url, params=params) as response:
        response.raise_for_status()
        return await response.json()

# –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π –∫–∞–º–ø–∞–Ω–∏–π
async def get_campaign_objectives(session: aiohttp.ClientSession, account_id: str, access_token: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {id_–∫–∞–º–ø–∞–Ω–∏–∏: —Ü–µ–ª—å_–∫–∞–º–ø–∞–Ω–∏–∏}."""
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/campaigns"
    params = {"fields": "id,objective", "limit": 1000}
    data = await fb_get(session, url, params=params, access_token=access_token)
    return {campaign['id']: campaign.get('objective', 'N/A') for campaign in data.get("data", [])}

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ (—É–¥–∞–ª–µ–Ω–æ –ø–æ–ª–µ objective)
async def get_ad_level_insights_for_date(session: aiohttp.ClientSession, account_id: str, date_str: str, access_token: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É."""
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "campaign_id,campaign_name,adset_id,adset_name,ad_id,ad_name,spend,actions,ctr,creative{thumbnail_url}",
        "level": "ad",
        "time_range": json.dumps({"since": date_str, "until": date_str}),
        "limit": 1000
    }
    data = await fb_get(session, url, params=params, access_token=access_token)
    return data.get("data", [])

def structure_insights(insights: list, objectives: dict):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Å–∞–π—Ç–æ–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é –ö–∞–º–ø–∞–Ω–∏—è -> –ì—Ä—É–ø–ø–∞ -> –û–±—ä—è–≤–ª–µ–Ω–∏—è."""
    campaigns = {}
    for ad in insights:
        spend = float(ad.get("spend", 0))
        if spend == 0:
            continue

        camp_id = ad['campaign_id']
        adset_id = ad['adset_id']
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
        if camp_id not in objectives:
            continue

        if camp_id not in campaigns:
            campaigns[camp_id] = {
                "name": ad['campaign_name'],
                "objective": objectives[camp_id], # –ë–µ—Ä–µ–º —Ü–µ–ª—å –∏–∑ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
                "adsets": {}
            }

        if adset_id not in campaigns[camp_id]['adsets']:
            campaigns[camp_id]['adsets'][adset_id] = {
                "name": ad['adset_name'],
                "ads": []
            }

        leads = sum(int(a["value"]) for a in ad.get("actions", []) if a.get("action_type") == LEAD_ACTION_TYPE)
        clicks = sum(int(a["value"]) for a in ad.get("actions", []) if a.get("action_type") == LINK_CLICK_ACTION_TYPE)
        
        ad_data = {
            "name": ad['ad_name'],
            "spend": spend,
            "leads": leads,
            "clicks": clicks,
            "ctr": float(ad.get('ctr', 0)),
            "thumbnail_url": ad.get('creative', {}).get('thumbnail_url', '#')
        }
        campaigns[camp_id]['adsets'][adset_id]['ads'].append(ad_data)
        
    return campaigns

def analyze_adsets(campaigns_data: dict):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Å—á–∏—Ç–∞—è –∏—Ö –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å."""
    analyzed_adsets = []
    for camp_id, camp in campaigns_data.items():
        for adset_id, adset in camp['adsets'].items():
            total_spend = sum(ad['spend'] for ad in adset['ads'])
            total_leads = sum(ad['leads'] for ad in adset['ads'])
            total_clicks = sum(ad['clicks'] for ad in adset['ads'])
            
            cost = float('inf')
            cost_type = 'CPL'
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –ª–∏–¥—ã, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ —Ç—Ä–∞—Ñ–∏–∫
            if "TRAFFIC" not in camp['objective'].upper() and total_leads > 0:
                cost = total_spend / total_leads
            elif total_clicks > 0:
                cost = total_spend / total_clicks
                cost_type = 'CPC'

            analyzed_adsets.append({
                "id": adset_id,
                "name": adset['name'],
                "campaign_name": camp['name'],
                "spend": total_spend,
                "cost": cost,
                "cost_type": cost_type,
                "ads": adset['ads']
            })
    return analyzed_adsets

def format_ad_list(ads: list, cost_type: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –æ—Ç—á–µ—Ç."""
    lines = []
    for ad in ads:
        if cost_type == 'CPL':
            cost = (ad['spend'] / ad['leads']) if ad['leads'] > 0 else 0
            cost_str = f"CPL: ${cost:.2f}"
        else:
            cost = (ad['spend'] / ad['clicks']) if ad['clicks'] > 0 else 0
            cost_str = f"CPC: ${cost:.2f}"
            
        lines.append(f'    <a href="{ad["thumbnail_url"]}">‚ñ´Ô∏è</a> <b>{ad["name"]}</b> | {cost_str} | CTR: {ad["ctr"]:.2f}%')
    return lines

async def generate_daily_report_text(accounts: list, meta_token: str):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞."""
    yesterday_str = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    report_date_str = (datetime.now() - timedelta(days=1)).strftime('%d %B %Y')

    final_report_lines = [f"<b>üìà –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {report_date_str}</b>"]
    
    timeout = aiohttp.ClientTimeout(total=240)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        tasks = [process_single_account(session, acc, yesterday_str, meta_token) for acc in accounts]
        account_results = await asyncio.gather(*tasks, return_exceptions=True)

    active_reports = 0
    for result in account_results:
        if isinstance(result, Exception) or not result:
            continue
        final_report_lines.append(result)
        active_reports += 1
            
    if active_reports == 0:
        return "‚úÖ –ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–æ–≤."

    return "\n".join(final_report_lines)

async def process_single_account(session, acc, date_str, meta_token):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ä–µ–∫–ª–∞–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–µ–∫—Ü–∏—é –æ—Ç—á–µ—Ç–∞."""
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –∫–∞–º–ø–∞–Ω–∏–π
    objectives = await get_campaign_objectives(session, acc["account_id"], meta_token)
    if not objectives:
        return None # –ù–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π –≤ –∞–∫–∫–∞—É–Ω—Ç–µ

    # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
    insights = await get_ad_level_insights_for_date(session, acc["account_id"], date_str, meta_token)
    if not insights:
        return None

    # –®–∞–≥ 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    campaigns_data = structure_insights(insights, objectives)
    if not campaigns_data:
        return None
        
    adsets = analyze_adsets(campaigns_data)
    
    # --- –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É ---
    total_spend = sum(adset['spend'] for adset in adsets)
    total_leads = sum(sum(ad['leads'] for ad in adset['ads']) for adset in adsets)
    total_clicks = sum(sum(ad['clicks'] for ad in adset['ads']) for adset in adsets)

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ---
    report_lines = ["‚îÄ" * 20, f"<b>üè¢ –ö–∞–±–∏–Ω–µ—Ç: <u>{acc['name']}</u></b>"]
    
    cost_str = ""
    if total_leads > 0:
        cpl = total_spend / total_leads
        cost_str += f"–õ–∏–¥—ã: {total_leads} | –°—Ä. CPL: ${cpl:.2f}"
    if total_clicks > 0:
        cpc = total_spend / total_clicks
        if cost_str: cost_str += " | "
        cost_str += f"–ö–ª–∏–∫–∏: {total_clicks} | –°—Ä. CPC: ${cpc:.2f}"
        
    report_lines.append(f"`–†–∞—Å—Ö–æ–¥: ${total_spend:.2f}`")
    if cost_str:
        report_lines.append(f"`{cost_str}`")
    
    # --- –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø ---
    adsets_with_cost = sorted([a for a in adsets if a['cost'] != float('inf')], key=lambda x: x['cost'])
    
    if not adsets_with_cost:
        return "\n".join(report_lines)

    best_adset = adsets_with_cost[0]
    worst_adset = adsets_with_cost[-1] if len(adsets_with_cost) > 1 else None

    report_lines.append("\n" + f"<b>–õ—É—á—à–∞—è –≥—Ä—É–ø–ø–∞:</b> {best_adset['name']} ({best_adset['campaign_name']})")
    report_lines.append(f"  - –†–∞—Å—Ö–æ–¥: ${best_adset['spend']:.2f} | {best_adset['cost_type']}: ${best_adset['cost']:.2f}")
    report_lines.extend(format_ad_list(best_adset['ads'], best_adset['cost_type']))

    if worst_adset and worst_adset['id'] != best_adset['id']:
        report_lines.append("\n" + f"<b>–•—É–¥—à–∞—è –≥—Ä—É–ø–ø–∞:</b> {worst_adset['name']} ({worst_adset['campaign_name']})")
        report_lines.append(f"  - –†–∞—Å—Ö–æ–¥: ${worst_adset['spend']:.2f} | {worst_adset['cost_type']}: ${worst_adset['cost']:.2f}")
        report_lines.extend(format_ad_list(worst_adset['ads'], worst_adset['cost_type']))
        
    return "\n".join(report_lines)
