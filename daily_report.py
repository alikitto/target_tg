import os
import asyncio
import aiohttp
from datetime import datetime, timedelta

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
from dotenv import load_dotenv
load_dotenv()
API_VERSION = "v19.0"
META_TOKEN = os.getenv("META_ACCESS_TOKEN")
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"
LINK_CLICK_ACTION_TYPE = "link_click"


# --- –§—É–Ω–∫—Ü–∏–∏ API ---

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None):
    params = params or {}
    params["access_token"] = META_TOKEN
    async with session.get(url, params=params) as response:
        response.raise_for_status()
        return await response.json()

async def get_insights_for_range(session: aiohttp.ClientSession, account_id: str, time_range: dict):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω."""
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "campaign_id,campaign_name,adset_id,adset_name,ad_id,ad_name,spend,actions,ctr,objective",
        "level": "ad",
        "time_range": time_range,
        "limit": 2000
    }
    data = await fb_get(session, url, params=params)
    return data.get("data", [])


# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---

def process_insights_data(insights: list):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—è —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
    data = {}
    for ad in insights:
        spend = float(ad.get("spend", 0))
        if spend == 0: continue
        
        camp_id = ad.get('campaign_id')
        if not camp_id: continue

        if camp_id not in data:
            data[camp_id] = {
                "name": ad.get('campaign_name'),
                "objective": ad.get('objective', 'N/A'),
                "spend": 0, "leads": 0, "clicks": 0
            }
        
        leads = sum(int(a["value"]) for a in ad.get("actions", []) if a.get("action_type") == LEAD_ACTION_TYPE)
        clicks = sum(int(a["value"]) for a in ad.get("actions", []) if a.get("action_type") == LINK_CLICK_ACTION_TYPE)
        
        data[camp_id]["spend"] += spend
        data[camp_id]["leads"] += leads
        data[camp_id]["clicks"] += clicks
        
    return data

def get_change_indicator(new, old):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏."""
    if old == 0 and new > 0:
        return "(üìà)"
    if old == 0:
        return ""
        
    percent_change = ((new - old) / old) * 100
    emoji = "üìà" if new > old else "üìâ"
    # –î–ª—è CPL/CPC –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É: —Ä–æ—Å—Ç - —ç—Ç–æ –ø–ª–æ—Ö–æ
    if "cpl" in str(old): emoji = "üìà" if new > old else "üìâ" # just a trick
    
    return f"({emoji} {percent_change:+.0f}%)"


# --- –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ ---

def format_summary(data_yesterday, data_before_yesterday):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å–≤–æ–¥–∫—É —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º."""
    y_spend = sum(c['spend'] for c in data_yesterday.values())
    y_leads = sum(c['leads'] for c in data_yesterday.values())
    y_cpl = (y_spend / y_leads) if y_leads > 0 else 0

    by_spend = sum(c['spend'] for c in data_before_yesterday.values())
    by_leads = sum(c['leads'] for c in data_before_yesterday.values())
    by_cpl = (by_spend / by_leads) if by_leads > 0 else 0

    spend_change = get_change_indicator(y_spend, by_spend)
    leads_change = get_change_indicator(y_leads, by_leads)
    cpl_change = get_change_indicator(y_cpl, by_cpl) if by_cpl > 0 else ""

    lines = [
        "<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
        f"‚óè –†–∞—Å—Ö–æ–¥: ${y_spend:.2f} {spend_change}",
        f"‚óè –õ–∏–¥—ã: {y_leads} {leads_change}",
        f"‚óè –°—Ä–µ–¥–Ω–∏–π CPL: ${y_cpl:.2f} {cpl_change}",
    ]
    return "\n".join(lines)

def format_key_campaigns(data_yesterday):
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª—É—á—à—É—é –∏ —Ö—É–¥—à—É—é –∫–∞–º–ø–∞–Ω–∏–∏."""
    if not data_yesterday: return ""
    
    campaign_perf = []
    for camp_id, data in data_yesterday.items():
        if "TRAFFIC" in data['objective'].upper() or "LINK_CLICKS" in data['objective'].upper():
            cost = (data['spend'] / data['clicks']) if data['clicks'] > 0 else float('inf')
            metric = "CPC"
        else:
            cost = (data['spend'] / data['leads']) if data['leads'] > 0 else float('inf')
            metric = "CPL"
        
        if cost != float('inf'):
            campaign_perf.append({"name": data['name'], "cost": cost, "metric": metric})

    if not campaign_perf: return ""

    sorted_campaigns = sorted(campaign_perf, key=lambda x: x['cost'])
    best = sorted_campaigns[0]
    worst = sorted_campaigns[-1]

    lines = ["<b>üîë –ö–ª—é—á–µ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏:</b>"]
    lines.append(f"üèÜ –õ—É—á—à–∞—è: \"{best['name']}\" ({best['metric']}: ${best['cost']:.2f})")
    if best['name'] != worst['name']:
        lines.append(f"üêå –•—É–¥—à–∞—è: \"{worst['name']}\" ({worst['metric']}: ${worst['cost']:.2f})")
        
    return "\n".join(lines)

def format_notifications(data_yesterday, data_before_yesterday):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤."""
    alerts = []
    for camp_id, y_data in data_yesterday.items():
        if camp_id in data_before_yesterday:
            by_data = data_before_yesterday[camp_id]
            
            y_cpl = (y_data['spend'] / y_data['leads']) if y_data['leads'] > 0 else 0
            by_cpl = (by_data['spend'] / by_data['leads']) if by_data['leads'] > 0 else 0

            if by_cpl > 0 and y_cpl > (by_cpl * 1.5): # –ï—Å–ª–∏ CPL –≤—ã—Ä–æ—Å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 50%
                growth = ((y_cpl - by_cpl) / by_cpl) * 100
                alerts.append(f"üî¥ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í –∫–∞–º–ø–∞–Ω–∏–∏ \"{y_data['name']}\" CPL –≤—ã—Ä–æ—Å –Ω–∞ {growth:.0f}%!")

    if not alerts:
        alerts.append("‚úÖ –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        
    return "<b>üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n" + "\n".join(alerts)


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥—É–ª—è ---

async def generate_daily_report_text() -> str:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    today = datetime.now()
    yesterday_str = (today - timedelta(days=1)).strftime('%Y-%m-%d')
    before_yesterday_str = (today - timedelta(days=2)).strftime('%Y-%m-%d')
    
    time_range_yesterday = {'since': yesterday_str, 'until': yesterday_str}
    time_range_before_yesterday = {'since': before_yesterday_str, 'until': before_yesterday_str}

    all_insights_yesterday = []
    all_insights_before_yesterday = []

    timeout = aiohttp.ClientTimeout(total=300)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        accounts = await fb_get(session, f"https://graph.facebook.com/{API_VERSION}/me/adaccounts", {"fields": "name,account_id"})
        accounts = accounts.get("data", [])
        
        if not accounts: return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."

        for acc in accounts:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–±–∞ –¥–Ω—è
                y_insights = await get_insights_for_range(session, acc['account_id'], time_range_yesterday)
                by_insights = await get_insights_for_range(session, acc['account_id'], time_range_before_yesterday)
                all_insights_yesterday.extend(y_insights)
                all_insights_before_yesterday.extend(by_insights)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {acc['name']}: {e}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    processed_yesterday = process_insights_data(all_insights_yesterday)
    processed_before_yesterday = process_insights_data(all_insights_before_yesterday)

    if not processed_yesterday:
        return "‚úÖ –ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–æ–≤."
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ —á–∞—Å—Ç—è–º
    report_date_str = (today - timedelta(days=1)).strftime('%d %B %Y')
    prev_date_str = (today - timedelta(days=2)).strftime('%d %B')
    
    header = f"<b>üìà –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {report_date_str}</b>\n<i>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –¥–Ω—ë–º ({prev_date_str})</i>"
    summary_block = format_summary(processed_yesterday, processed_before_yesterday)
    key_campaigns_block = format_key_campaigns(processed_yesterday)
    notifications_block = format_notifications(processed_yesterday, processed_before_yesterday)
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤ –æ–¥–∏–Ω –æ—Ç—á–µ—Ç
    final_report = "\n\n".join(filter(None, [header, summary_block, key_campaigns_block, notifications_block]))
    
    return final_report
