import os
import asyncio
import aiohttp
from datetime import datetime, timedelta
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
load_dotenv()
API_VERSION = "v19.0"
META_TOKEN = os.getenv("META_ACCESS_TOKEN")
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"
LINK_CLICK_ACTION_TYPE = "link_click"


# --- –§—É–Ω–∫—Ü–∏–∏ API ---

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None):
    params = params or {}
    params["access_token"] = META_TOKEN
    async with session.get(url, params=params) as response:
        response.raise_for_status()
        return await response.json()

async def get_ad_accounts(session: aiohttp.ClientSession):
    url = f"https://graph.facebook.com/{API_VERSION}/me/adaccounts"
    params = {"fields": "name,account_id"}
    data = await fb_get(session, url, params=params)
    return data.get("data", [])

async def get_ad_level_insights_for_yesterday(session: aiohttp.ClientSession, account_id: str):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–æ –ø–æ–ª–µ creative{thumbnail_url} –æ—Ç—Å—é–¥–∞.
    –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "campaign_id,campaign_name,adset_id,adset_name,ad_id,ad_name,spend,actions,ctr,objective",
        "level": "ad",
        "date_preset": "yesterday",
        "limit": 2000
    }
    data = await fb_get(session, url, params=params)
    return data.get("data", [])

async def get_ad_creatives(session: aiohttp.ClientSession, ad_ids: list):
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤—ã (–∫–∞—Ä—Ç–∏–Ω–∫–∏) –¥–ª—è —Å–ø–∏—Å–∫–∞ ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
    """
    url = f"https://graph.facebook.com/{API_VERSION}/"
    params = {
        "ids": ",".join(ad_ids),
        "fields": "creative{thumbnail_url}",
    }
    data = await fb_get(session, url, params=params)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å {ad_id: thumbnail_url}
    return {ad_id: ad.get("creative", {}).get("thumbnail_url", "#") for ad_id, ad in data.items()}


# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---

def merge_data(insights: list, creatives: dict):
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–∞–º.
    """
    for insight in insights:
        insight["thumbnail_url"] = creatives.get(insight["ad_id"], "#")
    return insights

def structure_insights(merged_insights: list):
    campaigns = {}
    for ad in merged_insights:
        spend = float(ad.get("spend", 0))
        if spend == 0: continue
        
        camp_id, adset_id = ad.get('campaign_id'), ad.get('adset_id')
        objective = ad.get('objective', 'N/A')
        
        if not all([camp_id, adset_id]): continue

        if camp_id not in campaigns:
            campaigns[camp_id] = {"name": ad['campaign_name'], "objective": objective, "adsets": {}}
        if adset_id not in campaigns[camp_id]['adsets']:
            campaigns[camp_id]['adsets'][adset_id] = {"name": ad['adset_name'], "ads": []}

        ad_data = {
            "name": ad['ad_name'],
            "spend": spend,
            "leads": sum(int(a["value"]) for a in ad.get("actions", []) if a.get("action_type") == LEAD_ACTION_TYPE),
            "clicks": sum(int(a["value"]) for a in ad.get("actions", []) if a.get("action_type") == LINK_CLICK_ACTION_TYPE),
            "ctr": float(ad.get('ctr', 0)),
            "thumbnail_url": ad.get("thumbnail_url", "#")
        }
        campaigns[camp_id]['adsets'][adset_id]['ads'].append(ad_data)
    return campaigns

def analyze_adsets_and_format(campaigns_data: dict):
    report_lines = []
    for camp_id, camp in campaigns_data.items():
        report_lines.append(f"<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è: {camp['name']}</b>")
        for adset_id, adset in camp['adsets'].items():
            total_spend = sum(ad['spend'] for ad in adset['ads'])
            total_leads = sum(ad['leads'] for ad in adset['ads'])
            total_clicks = sum(ad['clicks'] for ad in adset['ads'])

            cost_str = ""
            if "TRAFFIC" in camp['objective'].upper() or "LINK_CLICKS" in camp['objective'].upper():
                cpc = (total_spend / total_clicks) if total_clicks > 0 else 0
                cost_str = f"–ö–ª–∏–∫–∏: {total_clicks} | CPC: ${cpc:.2f}"
            else:
                cpl = (total_spend / total_leads) if total_leads > 0 else 0
                cost_str = f"–õ–∏–¥—ã: {total_leads} | CPL: ${cpl:.2f}"
            
            report_lines.append(f"  <b>‚Ü≥ –ì—Ä—É–ø–ø–∞:</b> {adset['name']}")
            report_lines.append(f"    - {cost_str} | –†–∞—Å—Ö–æ–¥: ${total_spend:.2f}")
    return "\n".join(report_lines)

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥—É–ª—è ---

async def generate_daily_report_text() -> str:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é process_account
    """
    timeout = aiohttp.ClientTimeout(total=240)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        accounts = await get_ad_accounts(session)
        if not accounts:
            return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."

        tasks = [process_account(session, acc) for acc in accounts]
        account_results = await asyncio.gather(*tasks)

    all_reports = [report for report in account_results if report]

    if not all_reports:
        return "‚úÖ –ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–æ–≤."

    report_date_str = (datetime.now() - timedelta(days=1)).strftime('%d %B %Y')
    final_header = f"<b>üìà –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {report_date_str}</b>"
    return final_header + "\n" + "\n".join(all_reports)

async def process_account(session, acc):
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç.
    """
    try:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        insights = await get_ad_level_insights_for_yesterday(session, acc['account_id'])
        if not insights:
            return None

        # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        active_ad_ids = [ad['ad_id'] for ad in insights]
        if not active_ad_ids:
            return None

        # –®–∞–≥ 3: –î–µ–ª–∞–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —ç—Ç–∏—Ö ID
        creatives = await get_ad_creatives(session, active_ad_ids)

        # –®–∞–≥ 4: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        merged_data = merge_data(insights, creatives)

        # –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        campaigns_data = structure_insights(merged_data)
        if not campaigns_data:
            return None

        account_header = f"\n<b>üè¢ –ö–∞–±–∏–Ω–µ—Ç: <u>{acc['name']}</u></b>"
        account_body = analyze_adsets_and_format(campaigns_data)
        return account_header + "\n" + account_body

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {acc.get('name', 'N/A')}: {e}")
        return None
