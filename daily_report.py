import asyncio
import aiohttp
from datetime import datetime, timedelta
import json

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API
API_VERSION = "v19.0"
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"
LINK_CLICK_ACTION_TYPE = "link_click"

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None, access_token: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Graph API."""
    params = params or {}
    params["access_token"] = access_token
    async with session.get(url, params=params) as response:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–æ—à–∏–±–∫—É), –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 4xx –∏–ª–∏ 5xx
        response.raise_for_status()
        return await response.json()

async def get_insights_for_date(session: aiohttp.ClientSession, account_id: str, date_str: str, access_token: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É."""
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "spend,actions",
        "level": "account",
        "time_range": json.dumps({"since": date_str, "until": date_str}),
    }
    data = await fb_get(session, url, params=params, access_token=access_token)
    
    if not data.get("data"):
        return {"spend": 0, "leads": 0, "clicks": 0}
        
    stats = data["data"][0]
    spend = float(stats.get("spend", 0))
    leads = sum(int(a["value"]) for a in stats.get("actions", []) if a.get("action_type") == LEAD_ACTION_TYPE)
    clicks = sum(int(a["value"]) for a in stats.get("actions", []) if a.get("action_type") == LINK_CLICK_ACTION_TYPE)
    
    return {"spend": spend, "leads": leads, "clicks": clicks}

def format_comparison(current_val, prev_val):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏."""
    if prev_val == 0:
        return "(...)" if current_val > 0 else ""
        
    diff = current_val - prev_val
    percent_change = (diff / prev_val) * 100
    
    # –ù–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: —ç–º–æ–¥–∑–∏ –¥–ª—è CPL/CPC –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
    # –†–æ—Å—Ç —Ü–µ–Ω—ã - —ç—Ç–æ –ø–ª–æ—Ö–æ (üìâ), –ø–∞–¥–µ–Ω–∏–µ - —Ö–æ—Ä–æ—à–æ (üìà)
    is_cost_metric = "cost" in str(diff).lower() # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–µ—Ç—Ä–∏–∫–∞ –ª–∏ —ç—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    
    emoji = ""
    if percent_change > 5: emoji = "üìâ" if is_cost_metric else "üìà"
    elif percent_change < -5: emoji = "üìà" if is_cost_metric else "üìâ"
    
    sign = "+" if percent_change >= 0 else ""
    return f"({emoji} {sign}{percent_change:.0f}%)"

def calculate_cpl_cpc(stats):
    """–í—ã—á–∏—Å–ª—è–µ—Ç CPL –∏–ª–∏ CPC."""
    if stats["leads"] > 0:
        cost = stats["spend"] / stats["leads"]
        return cost, "CPL"
    if stats["clicks"] > 0:
        cost = stats["spend"] / stats["clicks"]
        return cost, "CPC"
    return 0, "CPL"

async def generate_daily_report_text(accounts: list, meta_token: str):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞."""
    yesterday_str = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    day_before_str = (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d')
    
    report_lines = []
    
    yesterday_total = {"spend": 0, "leads": 0, "clicks": 0}
    day_before_total = {"spend": 0, "leads": 0, "clicks": 0}
    active_accounts_reports = []

    timeout = aiohttp.ClientTimeout(total=180)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        tasks = [process_single_account(session, acc, yesterday_str, day_before_str, meta_token) for acc in accounts]
        account_results = await asyncio.gather(*tasks)

    for result in account_results:
        if result:
            yesterday_total["spend"] += result["yesterday_stats"]["spend"]
            yesterday_total["leads"] += result["yesterday_stats"]["leads"]
            yesterday_total["clicks"] += result["yesterday_stats"]["clicks"]
            
            day_before_total["spend"] += result["day_before_stats"]["spend"]
            day_before_total["leads"] += result["day_before_stats"]["leads"]
            day_before_total["clicks"] += result["day_before_stats"]["clicks"]
            
            active_accounts_reports.append(result["report_text"])

    if not active_accounts_reports:
        return "‚úÖ –ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–æ–≤."

    report_date_str = (datetime.now() - timedelta(days=1)).strftime('%d %B %Y')
    report_lines.append(f"<b>üìà –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {report_date_str}</b>")
    report_lines.append("‚îÄ" * 20)
    
    spend_comp = format_comparison(yesterday_total["spend"], day_before_total["spend"])
    results_val, results_comp, results_label = (yesterday_total["leads"], format_comparison(yesterday_total["leads"], day_before_total["leads"]), "–õ–∏–¥—ã") if yesterday_total["leads"] > 0 else (yesterday_total["clicks"], format_comparison(yesterday_total["clicks"], day_before_total["clicks"]), "–ö–ª–∏–∫–∏")
    cost_val, cost_label = calculate_cpl_cpc(yesterday_total)
    prev_cost_val, _ = calculate_cpl_cpc(day_before_total)
    cost_comp = format_comparison(cost_val, prev_cost_val)


    report_lines.append("<b>üìä –û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –≤—Å–µ–º –∫–∞–±–∏–Ω–µ—Ç–∞–º:</b>")
    report_lines.append(f"‚óè **–†–∞—Å—Ö–æ–¥:** ${yesterday_total['spend']:.2f} {spend_comp}")
    report_lines.append(f"‚óè **{results_label}:** {results_val} {results_comp}")
    report_lines.append(f"‚óè **–°—Ä–µ–¥–Ω–∏–π {cost_label}:** ${cost_val:.2f} {cost_comp}")
    report_lines.append("‚îÄ" * 20)
    report_lines.extend(active_accounts_reports)

    return "\n".join(report_lines)

async def process_single_account(session, acc, yesterday_str, day_before_str, meta_token):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    yesterday_stats = await get_insights_for_date(session, acc["account_id"], yesterday_str, meta_token)
    
    if yesterday_stats["spend"] == 0:
        return None
        
    day_before_stats = await get_insights_for_date(session, acc["account_id"], day_before_str, meta_token)
    
    cost_val, cost_label = calculate_cpl_cpc(yesterday_stats)
    results_val, results_label = (yesterday_stats["leads"], "–õ–∏–¥—ã") if yesterday_stats["leads"] > 0 else (yesterday_stats["clicks"], "–ö–ª–∏–∫–∏")

    acc_report_text = (
        f"<b>üè¢ –ö–∞–±–∏–Ω–µ—Ç: <u>{acc['name']}</u></b>\n"
        f"  ‚óè **–†–∞—Å—Ö–æ–¥:** ${yesterday_stats['spend']:.2f}\n"
        f"  ‚óè **{results_label}:** {results_val}\n"
        f"  ‚óè **{cost_label}:** ${cost_val:.2f}"
    )
    
    return {
        "yesterday_stats": yesterday_stats,
        "day_before_stats": day_before_stats,
        "report_text": acc_report_text
    }
