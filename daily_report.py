import asyncio
import aiohttp
from datetime import datetime, timedelta

# –≠—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏—è fb_get –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –∏–∑ main.py –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è.
# –í –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏—Ö –≤—ã–Ω–æ—Å—è—Ç –≤ –æ–±—â–∏–π config.py –∏–ª–∏ api_client.py.
API_VERSION = "v19.0"
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"
LINK_CLICK_ACTION_TYPE = "link_click"

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None, access_token: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Graph API."""
    params = params or {}
    params["access_token"] = access_token
    async with session.get(url, params=params) as response:
        response.raise_for_status()
        return await response.json()

async def get_insights_for_period(session: aiohttp.ClientSession, account_id: str, date_preset: str, access_token: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "spend,actions",
        "level": "account",
        "date_preset": date_preset,
    }
    data = await fb_get(session, url, params=params, access_token=access_token)
    
    # Insights –º–æ–≥—É—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø—É—Å—Ç—ã–º–∏, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if not data.get("data"):
        return {"spend": 0, "leads": 0, "clicks": 0}
        
    stats = data["data"][0]
    spend = float(stats.get("spend", 0))
    leads = sum(int(a["value"]) for a in stats.get("actions", []) if a.get("action_type") == LEAD_ACTION_TYPE)
    clicks = sum(int(a["value"]) for a in stats.get("actions", []) if a.get("action_type") == LINK_CLICK_ACTION_TYPE)
    
    return {"spend": spend, "leads": leads, "clicks": clicks}

def format_comparison(today_val, yesterday_val):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏."""
    if yesterday_val == 0:
        return "(...)" if today_val > 0 else ""
        
    diff = today_val - yesterday_val
    percent_change = (diff / yesterday_val) * 100
    
    emoji = ""
    if percent_change > 5: emoji = "üìà"
    elif percent_change < -5: emoji = "üìâ"
    
    sign = "+" if percent_change > 0 else ""
    return f"({emoji} {sign}{percent_change:.0f}%)"

def calculate_cpl_cpc(stats):
    """–í—ã—á–∏—Å–ª—è–µ—Ç CPL –∏–ª–∏ CPC –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ª–∏–¥–æ–≤ –∏–ª–∏ –∫–ª–∏–∫–æ–≤."""
    if stats["leads"] > 0:
        cost = stats["spend"] / stats["leads"]
        return f"${cost:.2f}", "CPL"
    if stats["clicks"] > 0:
        cost = stats["spend"] / stats["clicks"]
        return f"${cost:.2f}", "CPC"
    return "$0.00", "CPL"

async def generate_daily_report_text(accounts: list, meta_token: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞.
    """
    report_lines = []
    
    yesterday_total = {"spend": 0, "leads": 0, "clicks": 0}
    day_before_total = {"spend": 0, "leads": 0, "clicks": 0}
    
    active_accounts_reports = []

    timeout = aiohttp.ClientTimeout(total=180)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        tasks = []
        for acc in accounts:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            task = asyncio.create_task(
                process_single_account(session, acc, meta_token)
            )
            tasks.append(task)
            
        account_results = await asyncio.gather(*tasks)

    for result in account_results:
        if result: # –ï—Å–ª–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            yesterday_total["spend"] += result["yesterday_stats"]["spend"]
            yesterday_total["leads"] += result["yesterday_stats"]["leads"]
            yesterday_total["clicks"] += result["yesterday_stats"]["clicks"]
            
            day_before_total["spend"] += result["day_before_stats"]["spend"]
            day_before_total["leads"] += result["day_before_stats"]["leads"]
            day_before_total["clicks"] += result["day_before_stats"]["clicks"]
            
            active_accounts_reports.append(result["report_text"])

    if not active_accounts_reports:
        return "‚úÖ –ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–æ–≤."

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π —Å–≤–æ–¥–∫–∏ ---
    report_date = (datetime.now() - timedelta(days=1)).strftime('%d %B %Y')
    report_lines.append(f"<b>üìà –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {report_date}</b>")
    report_lines.append("‚îÄ" * 20)
    
    spend_comp = format_comparison(yesterday_total["spend"], day_before_total["spend"])
    results_val, results_comp = (yesterday_total["leads"], format_comparison(yesterday_total["leads"], day_before_total["leads"])) if yesterday_total["leads"] > 0 else (yesterday_total["clicks"], format_comparison(yesterday_total["clicks"], day_before_total["clicks"]))
    results_label = "–õ–∏–¥—ã" if yesterday_total["leads"] > 0 else "–ö–ª–∏–∫–∏"

    cost_str, cost_label = calculate_cpl_cpc(yesterday_total)
    
    report_lines.append("<b>üìä –û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –≤—Å–µ–º –∫–∞–±–∏–Ω–µ—Ç–∞–º:</b>")
    report_lines.append(f"‚óè **–†–∞—Å—Ö–æ–¥:** ${yesterday_total['spend']:.2f} {spend_comp}")
    report_lines.append(f"‚óè **{results_label}:** {results_val} {results_comp}")
    report_lines.append(f"‚óè **–°—Ä–µ–¥–Ω–∏–π {cost_label}:** {cost_str}")
    report_lines.append("‚îÄ" * 20)

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É ---
    report_lines.extend(active_accounts_reports)

    return "\n".join(report_lines)


async def process_single_account(session, acc, meta_token):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    yesterday_stats = await get_insights_for_period(session, acc["account_id"], "yesterday", meta_token)
    
    # –ï—Å–ª–∏ –≤—á–µ—Ä–∞ –Ω–µ –±—ã–ª–æ —Ç—Ä–∞—Ç, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    if yesterday_stats["spend"] == 0:
        return None
        
    day_before_stats = await get_insights_for_period(session, acc["account_id"], "last_2d", meta_token)
    # API –∑–∞ last_2d –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É. –ù—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.
    day_before_stats = {k: day_before_stats[k] - yesterday_stats[k] for k in day_before_stats}

    # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ---
    cost_str, cost_label = calculate_cpl_cpc(yesterday_stats)
    results_val = yesterday_stats["leads"] if yesterday_stats["leads"] > 0 else yesterday_stats["clicks"]
    results_label = "–õ–∏–¥—ã" if yesterday_stats["leads"] > 0 else "–ö–ª–∏–∫–∏"

    acc_report_text = (
        f"<b>üè¢ –ö–∞–±–∏–Ω–µ—Ç: <u>{acc['name']}</u></b>\n"
        f"  ‚óè **–†–∞—Å—Ö–æ–¥:** ${yesterday_stats['spend']:.2f}\n"
        f"  ‚óè **{results_label}:** {results_val}\n"
        f"  ‚óè **{cost_label}:** {cost_str}"
    )
    
    return {
        "yesterday_stats": yesterday_stats,
        "day_before_stats": day_before_stats,
        "report_text": acc_report_text
    }
