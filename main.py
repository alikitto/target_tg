import os
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, BotCommand, BotCommandScopeDefault
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
META_TOKEN = os.getenv("META_ACCESS_TOKEN")
API_VERSION = "v19.0"
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()

# ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ ID —á–∞—Ç–∞.
# –≠—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –±–æ—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç.
sent_messages_by_chat = {}

# ============================
# ===         API          ===
# ============================
# ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ.
# –û–Ω–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Å–µ—Å—Å–∏—é aiohttp –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Graph API."""
    params = params or {}
    params["access_token"] = META_TOKEN
    
    async with session.get(url, params=params) as response:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ (4xx, 5xx), –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        response.raise_for_status()
        return await response.json()

async def get_ad_accounts(session: aiohttp.ClientSession):
    url = f"https://graph.facebook.com/{API_VERSION}/me/adaccounts"
    params = {"fields": "name,account_id"}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_campaigns(session: aiohttp.ClientSession, account_id: str):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/campaigns"
    params = {"fields": "id,name,status,objective", "limit": 500}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_all_adsets(session: aiohttp.ClientSession, account_id: str):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/adsets"
    params = {"fields": "id,name,campaign_id,status", "limit": 500}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_adset_insights(session: aiohttp.ClientSession, account_id: str, adset_ids: list):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "adset_id,spend,actions",
        "level": "adset",
        "filtering": f'[{{"field":"adset.id","operator":"IN","value":{adset_ids}}}]',
        "limit": 500
    }
    data = await fb_get(session, url, params)
    return data.get("data", [])


# ============================
# ===      –ü–æ–º–æ—â–Ω–∏–∫–∏       ===
# ============================

def cpl_label(cpl: float) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É –¥–ª—è CPL."""
    if cpl <= 1:
        return "üü¢ –î–µ—à—ë–≤—ã–π"
    elif cpl <= 3:
        return "üü° –°—Ä–µ–¥–Ω–∏–π"
    return "üî¥ –î–æ—Ä–æ–≥–æ–π"

# ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º.
async def send_and_store(message: Message, text: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏."""
    msg = await message.answer(text, **kwargs)
    chat_id = msg.chat.id
    if chat_id not in sent_messages_by_chat:
        sent_messages_by_chat[chat_id] = []
    sent_messages_by_chat[chat_id].append(msg.message_id)
    return msg


# ============================
# ===         –ú–µ–Ω—é         ===
# ============================

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram."""
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        BotCommand(command="report", description="üìä –û—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º"),
        BotCommand(command="clear", description="üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())

def inline_main_menu():
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –û—Ç—á—ë—Ç: –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="build_report")
    kb.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")
    kb.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    kb.adjust(1) # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
    return kb.as_markup()

# ============================
# ===       –•–µ–Ω–¥–ª–µ—Ä—ã       ===
# ============================

@router.message(Command("start", "restart"))
async def start_handler(msg: Message):
    await send_and_store(msg, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_main_menu())

@router.callback_query(F.data == "show_menu")
async def show_menu_handler(call: CallbackQuery):
    await call.message.edit_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_main_menu())


@router.message(Command("help"))
@router.callback_query(F.data == "help")
async def help_handler(event: Message | CallbackQuery):
    message = event if isinstance(event, Message) else event.message
    help_text = (
        "<b>‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "<b>/start</b> - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "<b>/report</b> - –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º.\n"
        "<b>/clear</b> - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ (–∫—Ä–æ–º–µ —ç—Ç–æ–≥–æ).\n\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API Facebook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
    )
    if isinstance(event, CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–±—ç–∫, –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        await event.message.edit_text(help_text, reply_markup=inline_main_menu())
    else:
        await send_and_store(message, help_text, reply_markup=inline_main_menu())

# ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –•–µ–Ω–¥–ª–µ—Ä –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º —Å–ª–æ–≤–∞—Ä–µ–º.
@router.message(Command("clear"))
@router.callback_query(F.data == "clear_chat")
async def clear_chat_handler(event: Message | CallbackQuery):
    message = event if isinstance(event, Message) else event.message
    chat_id = message.chat.id
    
    if chat_id in sent_messages_by_chat and sent_messages_by_chat[chat_id]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –æ–± –æ—á–∏—Å—Ç–∫–µ, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ —Å—Ä–∞–∑—É
        current_msg_id = message.message_id
        
        messages_to_delete = sent_messages_by_chat[chat_id].copy()
        sent_messages_by_chat[chat_id] = []

        count = 0
        for msg_id in messages_to_delete:
            if msg_id == current_msg_id: continue
            try:
                await bot.delete_message(chat_id, msg_id)
                count += 1
            except TelegramBadRequest: # –û—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                pass
        
        await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –£–¥–∞–ª–∏–ª {count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    else:
        await message.answer("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.")
    
    if isinstance(event, CallbackQuery):
        await start_handler(message)


# ============ –û—Ç—á—ë—Ç —Å –ª–æ–∞–¥–µ—Ä–æ–º ============
@router.message(Command("report"))
@router.callback_query(F.data == "build_report")
async def build_report(event: Message | CallbackQuery):
    message = event if isinstance(event, Message) else event.message
    status_msg = await send_and_store(message, "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")

    active_accounts_data = []

    # ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º aiohttp —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞.
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
    try:
        async with aiohttp.ClientSession() as session:
            accounts = await get_ad_accounts(session)
            if not accounts:
                await status_msg.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                return

            total = len(accounts)
            for idx, acc in enumerate(accounts, start=1):
                await status_msg.edit_text(f"üì¶({idx}/{total}) –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–±–∏–Ω–µ—Ç:\n<b>{acc['name']}</b>")
                await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UX

                campaigns = await get_campaigns(session, acc["account_id"])
                active_campaigns = {c["id"]: c for c in campaigns if c.get("status") == "ACTIVE"}
                
                if not active_campaigns:
                    continue

                adsets = await get_all_adsets(session, acc["account_id"])
                active_adsets = [a for a in adsets if a.get("status") == "ACTIVE" and a.get("campaign_id") in active_campaigns]

                if not active_adsets:
                    continue

                adset_ids = [a["id"] for a in active_adsets]
                insights = await get_adset_insights(session, acc["account_id"], adset_ids)

                spend_map, chats_map = {}, {}
                for row in insights:
                    spend = float(row.get("spend", 0))
                    chats = sum(
                        int(a["value"]) for a in row.get("actions", [])
                        if a.get("action_type") == LEAD_ACTION_TYPE
                    )
                    spend_map[row["adset_id"]] = spend
                    chats_map[row["adset_id"]] = chats

                campaigns_data = {}
                for ad in active_adsets:
                    camp_id = ad["campaign_id"]
                    campaign = active_campaigns.get(camp_id)
                    if not campaign: continue

                    spend = spend_map.get(ad["id"], 0)
                    leads = chats_map.get(ad["id"], 0)
                    if spend == 0 and leads == 0: continue

                    cpl = (spend / leads) if leads > 0 else 0
                    ad_data = {
                        "name": ad["name"],
                        "objective": campaign.get("objective", "N/A"),
                        "cpl": cpl,
                        "leads": leads,
                        "spend": spend
                    }
                    if camp_id not in campaigns_data:
                       campaigns_data[camp_id] = {"name": campaign["name"], "adsets": []}
                    campaigns_data[camp_id]["adsets"].append(ad_data)
                
                if campaigns_data:
                    active_accounts_data.append({
                        "name": acc["name"],
                        "campaigns": list(campaigns_data.values()),
                        "active_count": len(campaigns_data)
                    })
    
    # ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
    except aiohttp.ClientResponseError as e:
        await status_msg.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞ API Facebook:</b>\n\n–ö–æ–¥: {e.status}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {e.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    except Exception as e:
        await status_msg.edit_text(f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:</b>\n\n{e}")
        return

    if not active_accounts_data:
        await status_msg.edit_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –∏–ª–∏ –ª–∏–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await status_msg.edit_text("üìä <b>–û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!</b> –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")

    for acc in active_accounts_data:
        msg_lines = [f"<b>üè¢ –†–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b> <u>{acc['name']}</u>",
                     f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {acc['active_count']}\n"]
        for camp in acc["campaigns"]:
            msg_lines.append(f"<b>üéØ {camp['name']}</b>")
            for ad in sorted(camp["adsets"], key=lambda x: x['cpl']):
                status_emoji = "üü¢" if ad["leads"] > 0 else "üî¥"
                msg_lines.append(
                    f"{status_emoji} <b>{ad['name']}</b>\n"
                    f"  –¶–µ–ª—å: {ad['objective']} | CPL: <b>${ad['cpl']:.2f}</b> ({cpl_label(ad['cpl'])})\n"
                    f"  –õ–∏–¥—ã: {ad['leads']} | –†–∞—Å—Ö–æ–¥: ${ad['spend']:.2f}"
                )
            msg_lines.append("")
        
        await send_and_store(message, "\n".join(msg_lines))

    await send_and_store(message, "‚úÖ –û—Ç—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=inline_main_menu())


# ============================
# ===         –ó–∞–ø—É—Å–∫       ===
# ============================

async def main():
    dp.include_router(router)
    await set_bot_commands(bot)
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª, –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
