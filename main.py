import os
import asyncio
import aiohttp
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (Message, CallbackQuery, BotCommand, BotCommandScopeDefault,
                           ReplyKeyboardMarkup, KeyboardButton)
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
META_TOKEN = os.getenv("META_ACCESS_TOKEN")
API_VERSION = "v19.0"
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"
LINK_CLICK_ACTION_TYPE = "link_click"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()

# ============================
# ===    –§—É–Ω–∫—Ü–∏–∏ API     ===
# ============================

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None):
    params = params or {}
    params["access_token"] = META_TOKEN
    return await session.get(url, params=params)

async def get_ad_accounts(session: aiohttp.ClientSession):
    url = f"https://graph.facebook.com/{API_VERSION}/me/adaccounts"
    params = {"fields": "name,account_id"}
    response = await fb_get(session, url, params)
    response.raise_for_status()
    data = await response.json()
    return data.get("data", [])

async def get_ad_level_insights(session: aiohttp.ClientSession, account_id: str, date_preset: str):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "campaign_name,adset_name,ad_name,spend,actions,ctr",
        "level": "ad",
        "date_preset": date_preset,
        "limit": 1000
    }
    response = await fb_get(session, url, params)
    response.raise_for_status()
    data = await response.json()
    return data.get("data", [])


# ============================
# ===  –û–¢–ß–ï–¢ –ü–û –ê–ö–¢–ò–í–ù–´–ú –ö–ê–ú–ü–ê–ù–ò–Ø–ú ===
# ============================

@router.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
async def active_campaigns_period_select(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="run_active_report:today")
    kb.button(text="–í—á–µ—Ä–∞", callback_data="run_active_report:yesterday")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º:", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("run_active_report:"))
async def run_active_report_handler(call: CallbackQuery):
    date_preset = call.data.split(":")[1]
    await call.message.edit_text(f"–°–æ–±–∏—Ä–∞—é –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥ '{date_preset}'...")
    
    final_text = ""
    timeout = aiohttp.ClientTimeout(total=180)
    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            accounts = await get_ad_accounts(session)
            if not accounts:
                await call.message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                return

            for acc in accounts:
                insights = await get_ad_level_insights(session, acc['account_id'], date_preset)
                if insights:
                    final_text += f"\n\n<b>üè¢ –ö–∞–±–∏–Ω–µ—Ç: {acc['name']}</b>\n"
                    for insight in insights:
                        spend = float(insight.get('spend', 0))
                        if spend > 0:
                            final_text += f"- {insight['campaign_name']} | {insight['adset_name']} | ${spend:.2f}\n"
            
            if not final_text:
                await call.message.edit_text("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                await call.message.edit_text("<b>–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤:</b>\n" + final_text)

    except aiohttp.ClientResponseError as e:
        await call.message.answer(f"‚ùå –û–®–ò–ë–ö–ê API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e.status}, {e.message}")
    except Exception as e:
        await call.message.answer(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

# ============================
# === –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ú–ê–ù–î–ê ===
# ============================

@router.message(Command("debug"))
async def debug_yesterday_spend(message: Message):
    await message.answer("üîç –ù–∞—á–∏–Ω–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É... –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–∂–¥—ã–π –∫–∞–±–∏–Ω–µ—Ç.")
    timeout = aiohttp.ClientTimeout(total=120)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        try:
            accounts = await get_ad_accounts(session)
            if not accounts:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
                return

            for acc in accounts:
                url = f"https://graph.facebook.com/{API_VERSION}/act_{acc['account_id']}/insights"
                params = {"level": "account", "date_preset": "yesterday", "fields": "spend,impressions"}

                try:
                    response = await fb_get(session, url, params)
                    if response.status == 200:
                        data = await response.json()
                        if data.get("data"):
                            spend = float(data["data"][0].get("spend", 0))
                            impressions = int(data["data"][0].get("impressions", 0))
                            await message.answer(f"‚úÖ <b>{acc['name']}</b>\n–†–∞—Å—Ö–æ–¥: ${spend:.2f}, –ü–æ–∫–∞–∑—ã: {impressions}")
                        else:
                             await message.answer(f"üü° <b>{acc['name']}</b>\n–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –Ω–æ Facebook –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
                    else:
                        data = await response.json()
                        error_message = data.get("error", {}).get("message", "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π")
                        await message.answer(f"‚ùå <b>{acc['name']}</b>\n–û–®–ò–ë–ö–ê API! –ö–æ–¥: {response.status}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                except Exception as e:
                    await message.answer(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–±–∏–Ω–µ—Ç–∞ {acc['name']}: {type(e).__name__} - {e}")

        except Exception as e:
            await message.answer(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {type(e).__name__} - {e}")
            
    await message.answer("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# ============================
# ===    –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã     ===
# ============================
@router.message(Command("start"))
async def start_handler(msg: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")]],
        resize_keyboard=True
    )
    await msg.answer("–ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞. –î–æ—Å—Ç—É–ø–µ–Ω –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º –∏ /debug", reply_markup=kb)
    
async def set_bot_commands(bot: Bot):
    await bot.set_my_commands([
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand(command="debug", description="‚öôÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"),
    ])

# ============================
# ===         –ó–∞–ø—É—Å–∫       ===
# ============================
async def main():
    dp.include_router(router)
    await set_bot_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
