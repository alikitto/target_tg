import os
import asyncio
import aiohttp
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (Message, CallbackQuery, BotCommand, BotCommandScopeDefault,
                           ReplyKeyboardMarkup, KeyboardButton) # –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
META_TOKEN = os.getenv("META_ACCESS_TOKEN")
API_VERSION = "v19.0"
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"
LINK_CLICK_ACTION_TYPE = "link_click"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()
sent_messages_by_chat = {}

# ============================
# ===         API          ===
# ============================

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None):
    params = params or {}
    params["access_token"] = META_TOKEN
    async with session.get(url, params=params) as response:
        response.raise_for_status()
        return await response.json()

async def get_ad_accounts(session: aiohttp.ClientSession):
    url = f"https://graph.facebook.com/{API_VERSION}/me/adaccounts"
    params = {"fields": "name,account_id"}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_campaigns(session: aiohttp.ClientSession, account_id: str):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/campaigns"
    params = {"fields": "id,name,status,objective", "limit": 500}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_all_adsets(session: aiohttp.ClientSession, account_id: str):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/adsets"
    params = {"fields": "id,name,campaign_id,status", "limit": 500}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_all_ads_with_creatives(session: aiohttp.ClientSession, account_id: str, active_adset_ids: list):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/ads"
    filtering = [
        {'field': 'adset.id', 'operator': 'IN', 'value': active_adset_ids},
        {'field': 'effective_status', 'operator': 'IN', 'value': ['ACTIVE']}
    ]
    params = {
        "fields": "id,name,adset_id,campaign_id,creative{thumbnail_url}",
        "filtering": json.dumps(filtering),
        "limit": 1000
    }
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_ad_level_insights(session: aiohttp.ClientSession, account_id: str, ad_ids: list, date_preset: str, time_range_str: str = None):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "ad_id,spend,actions,ctr",
        "level": "ad",
        "filtering": f'[{{"field":"ad.id","operator":"IN","value":{ad_ids}}}]',
        "limit": 1000
    }
    if time_range_str:
        params["time_range"] = time_range_str
    else:
        params["date_preset"] = date_preset
    data = await fb_get(session, url, params)
    return data.get("data", [])


# ============================
# ===       –ü–æ–º–æ—â–Ω–∏–∫–∏      ===
# ============================

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
def cpl_label(value: float, metric: str) -> str:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–∫–∂–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è /clear
async def send_and_store(message: Message | CallbackQuery, text: str, *, is_persistent: bool = False, **kwargs):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass


# ============================
# ===         –ú–µ–Ω—é         ===
# ============================

def main_reply_menu() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –ì–õ–ê–í–ù–£–Æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω—è–µ—Ç –æ–±—ã—á–Ω—É—é."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏"), KeyboardButton(text="üìà –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞..."
    )

def inline_period_menu():
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á—ë—Ç–∞."""
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="build_report:today")
    kb.button(text="–í—á–µ—Ä–∞", callback_data="build_report:yesterday")
    kb.button(text="–ó–∞ 7 –¥–Ω–µ–π", callback_data="build_report:last_7d")
    kb.adjust(3)
    return kb.as_markup()

# ============================
# ===       –•–µ–Ω–¥–ª–µ—Ä—ã       ===
# ============================

@router.message(Command("start", "restart"))
async def start_handler(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await msg.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_reply_menu()
    )

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –û—Ç—á–µ—Ç–∞ –ø–æ –ê–∫—Ç–∏–≤–Ω—ã–º –ö–∞–º–ø–∞–Ω–∏—è–º ---
@router.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
async def active_campaigns_period_select(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º."""
    await message.answer("üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=inline_period_menu())
    
# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –î–Ω–µ–≤–Ω–æ–≥–æ –û—Ç—á–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞) ---
@router.message(F.text == "üìà –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç")
async def daily_report_stub(message: Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è '–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏" ---
@router.callback_query(F.data.startswith("build_report:"))
async def build_report_handler(call: CallbackQuery):
    date_preset = call.data.split(":")[1]
    time_range_str = None
    
    await call.message.edit_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{date_preset}</b>...")
    status_msg = await call.message.answer("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ API...")

    all_accounts_data = {}
    timeout = aiohttp.ClientTimeout(total=180)

    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            accounts = await get_ad_accounts(session)
            if not accounts:
                await status_msg.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                return

            total = len(accounts)
            for idx, acc in enumerate(accounts, start=1):
                base_text = f"üì¶({idx}/{total}) –ö–∞–±–∏–Ω–µ—Ç: <b>{acc['name']}</b>\n"
                await status_msg.edit_text(base_text + " C–∫–∞—á–∏–≤–∞—é –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –≥—Ä—É–ø–ø—ã...")
                
                campaigns = await get_campaigns(session, acc["account_id"])
                campaigns_map = {c['id']: c for c in campaigns}
                
                adsets = await get_all_adsets(session, acc["account_id"])
                active_adsets = [a for a in adsets if a.get("status") == "ACTIVE"]
                if not active_adsets: continue
                
                adsets_map = {a['id']: a for a in active_adsets}
                active_adset_ids = list(adsets_map.keys())

                await status_msg.edit_text(base_text + " C–∫–∞—á–∏–≤–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
                ads = await get_all_ads_with_creatives(session, acc["account_id"], active_adset_ids)
                if not ads: continue
                
                ad_ids = [ad['id'] for ad in ads]
                await status_msg.edit_text(base_text + f" C–∫–∞—á–∏–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
                
                insights = await get_ad_level_insights(session, acc["account_id"], ad_ids, date_preset, time_range_str)
                insights_map = {row['ad_id']: row for row in insights}

                # ... (–±–ª–æ–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
                account_data = {}
                for ad in ads:
                    stats = insights_map.get(ad['id'])
                    if not stats or float(stats.get('spend', 0)) == 0:
                        continue
                    
                    camp_id = ad.get('campaign_id')
                    adset_id = ad['adset_id']
                    campaign_obj = campaigns_map.get(camp_id)
                    if not campaign_obj: continue

                    if camp_id not in account_data:
                        account_data[camp_id] = {
                            "name": campaign_obj['name'], "objective": campaign_obj.get("objective", "N/A"),
                            "adsets": {}
                        }
                    if adset_id not in account_data[camp_id]['adsets']:
                         account_data[camp_id]['adsets'][adset_id] = {
                            "name": adsets_map[adset_id]['name'], "ads": []
                         }
                    account_data[camp_id]['adsets'][adset_id]['ads'].append({**ad, **stats})
                
                if account_data:
                    all_accounts_data[acc['name']] = account_data
        
        await bot.delete_message(call.message.chat.id, status_msg.message_id)

        if not all_accounts_data:
            await call.message.edit_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # --- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
        final_report_lines = []
        for acc_name, campaigns_data in all_accounts_data.items():
            final_report_lines.append(f"<b>üè¢ –†–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: <u>{acc_name}</u></b>\n")
            for camp_data in campaigns_data.values():
                final_report_lines.append(f"<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è:</b> {camp_data['name']}")
                for adset_data in camp_data['adsets'].values():
                    final_report_lines.append(f"  <b>‚Ü≥ –ì—Ä—É–ø–ø–∞:</b> <code>{adset_data['name']}</code>")
                    for ad in adset_data['ads']:
                        spend = float(ad.get('spend', 0))
                        leads = sum(int(a["value"]) for a in ad.get("actions", []) if a.get("action_type") == LEAD_ACTION_TYPE)
                        clicks = sum(int(a["value"]) for a in ad.get("actions", []) if a.get("action_type") == LINK_CLICK_ACTION_TYPE)
                        cost_str = ""
                        if "TRAFFIC" in camp_data['objective'].upper() and clicks > 0:
                            cost_str = f"CPC: ${spend/clicks:.2f}"
                        elif leads > 0:
                            cost_str = f"CPL: ${spend/leads:.2f}"
                        
                        thumb_url = ad.get('creative', {}).get('thumbnail_url', '#')
                        final_report_lines.append(f'    <a href="{thumb_url}">üñºÔ∏è</a> <b>{ad["name"]}</b> | –†–∞—Å—Ö–æ–¥: ${spend:.2f} | {cost_str}')
        
        final_report = "\n".join(final_report_lines)
        if len(final_report) > 4096:
            for x in range(0, len(final_report), 4096):
                await call.message.answer(final_report[x:x+4096], disable_web_page_preview=True)
        else:
             await call.message.answer(final_report, disable_web_page_preview=True)
        
        await call.message.delete()

    except Exception as e:
        await call.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# ============================
# ===         –ó–∞–ø—É—Å–∫       ===
# ============================

async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
