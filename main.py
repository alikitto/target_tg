import os
import asyncio
import aiohttp
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (Message, CallbackQuery, BotCommand, BotCommandScopeDefault,
                           ReplyKeyboardMarkup, KeyboardButton)
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
META_TOKEN = os.getenv("META_ACCESS_TOKEN")
API_VERSION = "v19.0"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()

# ============================
# ===    –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API     ===
# ============================

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None):
    """–ë–∞–∑–æ–≤–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Graph API."""
    params = params or {}
    params["access_token"] = META_TOKEN
    async with session.get(url, params=params) as response:
        # –í–ê–ñ–ù–û: –ú—ã –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º response.raise_for_status() –∑–¥–µ—Å—å,
        # —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ –≤—Ä—É—á–Ω—É—é –≤ –º–µ—Å—Ç–µ –≤—ã–∑–æ–≤–∞.
        return response

async def get_ad_accounts(session: aiohttp.ClientSession):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    url = f"https://graph.facebook.com/{API_VERSION}/me/adaccounts"
    params = {"fields": "name,account_id"}
    response = await fb_get(session, url, params)
    if response.status == 200:
        data = await response.json()
        return data.get("data", [])
    response.raise_for_status() # –ï—Å–ª–∏ —Å–∞–º –∑–∞–ø—Ä–æ—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    return []


# ============================
# === –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ú–ê–ù–î–ê ===
# ============================

@router.message(Command("debug"))
async def debug_yesterday_spend(message: Message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∏ –ø–æ–∫–∞–∑–æ–≤ –∑–∞ –≤—á–µ—Ä–∞.
    """
    await message.answer("üîç –ù–∞—á–∏–Ω–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É... –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–∂–¥—ã–π –∫–∞–±–∏–Ω–µ—Ç.")
    
    timeout = aiohttp.ClientTimeout(total=120)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        try:
            accounts = await get_ad_accounts(session)
            if not accounts:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
                return

            for acc in accounts:
                acc_id = acc['account_id']
                acc_name = acc['name']
                
                url = f"https://graph.facebook.com/{API_VERSION}/act_{acc_id}/insights"
                params = {
                    "level": "account",
                    "date_preset": "yesterday",
                    "fields": "spend,impressions"
                }

                try:
                    response = await fb_get(session, url, params)
                    data = await response.json()

                    if response.status == 200:
                        if data.get("data"):
                            spend = float(data["data"][0].get("spend", 0))
                            impressions = int(data["data"][0].get("impressions", 0))
                            if spend > 0 or impressions > 0:
                                await message.answer(f"‚úÖ <b>{acc_name}</b>\n–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –†–∞—Å—Ö–æ–¥: ${spend:.2f}, –ü–æ–∫–∞–∑—ã: {impressions}")
                            else:
                                await message.answer(f"üü° <b>{acc_name}</b>\n–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –Ω–æ —Ä–∞—Å—Ö–æ–¥ –∏ –ø–æ–∫–∞–∑—ã –∑–∞ –≤—á–µ—Ä–∞ —Ä–∞–≤–Ω—ã –Ω—É–ª—é.")
                        else:
                             await message.answer(f"üü° <b>{acc_name}</b>\n–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –Ω–æ Facebook –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö).")
                    else:
                        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200, –Ω–æ –µ—Å—Ç—å JSON —Å –æ—à–∏–±–∫–æ–π
                        error_message = data.get("error", {}).get("message", "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π")
                        await message.answer(f"‚ùå <b>{acc_name}</b>\n–û–®–ò–ë–ö–ê API! –ö–æ–¥: {response.status}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")

                except Exception as e:
                    await message.answer(f"CRITICAL: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–±–∏–Ω–µ—Ç–∞ {acc_name}: {e}")

        except aiohttp.ClientResponseError as e:
            await message.answer(f"CRITICAL: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –û—à–∏–±–∫–∞ API: {e.status}, {e.message}")
        except Exception as e:
            await message.answer(f"CRITICAL: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            
    await message.answer("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# ============================
# ===    –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã     ===
# ============================
# –û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ—à–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ

@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer("–ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /debug")
    
async def set_bot_commands(bot: Bot):
    await bot.set_my_commands([
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand(command="debug", description="‚öôÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"),
    ])

# ============================
# ===         –ó–∞–ø—É—Å–∫       ===
# ============================
async def main():
    dp.include_router(router)
    await set_bot_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
