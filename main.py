import os
import asyncio
import aiohttp
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (Message, CallbackQuery, BotCommand, BotCommandScopeDefault,
                           ReplyKeyboardMarkup, KeyboardButton)
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
from daily_report import generate_daily_report_text

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
META_TOKEN = os.getenv("META_ACCESS_TOKEN")
API_VERSION = "v19.0"
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"
LINK_CLICK_ACTION_TYPE = "link_click"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()

# ============================
# ===    –§—É–Ω–∫—Ü–∏–∏ API     ===
# ============================

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None):
    params = params or {}
    params["access_token"] = META_TOKEN
    response = await session.get(url, params=params)
    response.raise_for_status()
    return await response.json()

async def get_ad_accounts(session: aiohttp.ClientSession):
    url = f"https://graph.facebook.com/{API_VERSION}/me/adaccounts"
    params = {"fields": "name,account_id"}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_ad_level_insights(session: aiohttp.ClientSession, account_id: str, date_preset: str):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "campaign_name,adset_name,ad_name,spend,actions,ctr,objective,creative{thumbnail_url}",
        "level": "ad",
        "date_preset": date_preset,
        "limit": 1000
    }
    data = await fb_get(session, url, params)
    return data.get("data", [])

# ============================
# ===       –ú–µ–Ω—é           ===
# ============================
def main_reply_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏"), KeyboardButton(text="üìà –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç")],
            [KeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (AI)"), KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def inline_period_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="run_active_report:today")
    kb.button(text="–í—á–µ—Ä–∞", callback_data="run_active_report:yesterday")
    kb.button(text="–ó–∞ 7 –¥–Ω–µ–π", callback_data="run_active_report:last_7d")
    kb.adjust(3)
    return kb.as_markup()

async def set_bot_commands(bot: Bot):
    await bot.set_my_commands([
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="clear", description="üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"),
    ])

# ============================
# ===       –•–µ–Ω–¥–ª–µ—Ä—ã       ===
# ============================

@router.message(Command("start", "restart"))
async def start_handler(msg: Message):
    await msg.answer("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=main_reply_menu())

@router.message(F.text.in_({"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (AI)", "üÜò –ü–æ–º–æ—â—å"}))
async def future_functions_handler(message: Message):
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}\n\n–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –î–Ω–µ–≤–Ω–æ–≥–æ –û—Ç—á–µ—Ç–∞ ---
@router.message(F.text == "üìà –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç")
async def daily_report_handler(message: Message):
    status_msg = await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")
    try:
        async with aiohttp.ClientSession() as session:
            accounts = await get_ad_accounts(session)
        if not accounts:
            await status_msg.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
            return
        report_text = await generate_daily_report_text(accounts, META_TOKEN)
        await bot.delete_message(message.chat.id, status_msg.message_id)
        if len(report_text) > 4096:
            for x in range(0, len(report_text), 4096):
                await message.answer(report_text[x:x+4096], disable_web_page_preview=True)
        else:
            await message.answer(report_text, disable_web_page_preview=True)
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞:\n`{type(e).__name__}: {e}`")

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –û—Ç—á–µ—Ç–∞ –ø–æ –ê–∫—Ç–∏–≤–Ω—ã–º –ö–∞–º–ø–∞–Ω–∏—è–º ---
@router.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
async def active_campaigns_period_select(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º:", reply_markup=inline_period_menu())

@router.callback_query(F.data.startswith("run_active_report:"))
async def run_active_report_handler(call: CallbackQuery):
    date_preset = call.data.split(":")[1]
    await call.message.edit_text(f"‚è≥ –°–æ–±–∏—Ä–∞—é –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥ '{date_preset.replace('_', ' ')}'...")
    
    timeout = aiohttp.ClientTimeout(total=180)
    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            accounts = await get_ad_accounts(session)
            if not accounts:
                await call.message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                return

            report_lines = [f"<b>–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {date_preset.replace('_', ' ').capitalize()}</b>"]
            total_accounts_with_activity = 0

            for acc in accounts:
                insights = await get_ad_level_insights(session, acc['account_id'], date_preset)
                if not insights:
                    continue
                
                # --- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
                structured_data = {}
                has_activity_in_acc = False
                for ad in insights:
                    spend = float(ad.get('spend', 0))
                    if spend <= 0:
                        continue
                    has_activity_in_acc = True
                    camp_name = ad['campaign_name']
                    adset_name = ad['adset_name']
                    if camp_name not in structured_data:
                        structured_data[camp_name] = {}
                    if adset_name not in structured_data[camp_name]:
                        structured_data[camp_name][adset_name] = []
                    structured_data[camp_name][adset_name].append(ad)

                if has_activity_in_acc:
                    total_accounts_with_activity += 1
                    report_lines.append(f"\n<b>üè¢ –ö–∞–±–∏–Ω–µ—Ç: <u>{acc['name']}</u></b>")

                    for camp_name, adsets in structured_data.items():
                        report_lines.append(f"\n<b>üéØ {camp_name}</b>")
                        for adset_name, ads in adsets.items():
                            report_lines.append(f"  <b>‚Ü≥ –ì—Ä—É–ø–ø–∞:</b> {adset_name}")
                            for ad in sorted(ads, key=lambda x: float(x.get('spend', 0)), reverse=True):
                                spend = float(ad['spend'])
                                leads = sum(int(a["value"]) for a in ad.get("actions", []) if a.get("action_type") == LEAD_ACTION_TYPE)
                                clicks = sum(int(a["value"]) for a in ad.get("actions", []) if a.get("action_type") == LINK_CLICK_ACTION_TYPE)
                                objective = ad.get('objective', 'N/A').upper()
                                cost_str = ""
                                if "TRAFFIC" in objective and clicks > 0:
                                    cost_str = f"CPC: ${spend/clicks:.2f}"
                                elif leads > 0:
                                    cost_str = f"CPL: ${spend/leads:.2f}"
                                
                                thumb_url = ad.get('creative', {}).get('thumbnail_url', '#')
                                report_lines.append(f'    <a href="{thumb_url}">‚ñ´Ô∏è</a> {ad["ad_name"]}: ${spend:.2f} | {cost_str}')
            
            if total_accounts_with_activity == 0:
                await call.message.edit_text("‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                final_report = "\n".join(report_lines)
                if len(final_report) > 4096:
                    await call.message.edit_text("–û—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ —á–∞—Å—Ç—è–º...")
                    for x in range(0, len(final_report), 4096):
                        await call.message.answer(final_report[x:x+4096], disable_web_page_preview=True)
                else:
                    await call.message.edit_text(final_report, disable_web_page_preview=True)

    except aiohttp.ClientResponseError as e:
        data = await e.json()
        error_message = data.get("error", {}).get("message", e.message)
        await call.message.answer(f"‚ùå –û–®–ò–ë–ö–ê API: {e.status}, {error_message}")
    except Exception as e:
        await call.message.answer(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {type(e).__name__} - {e}")

# ============================
# ===         –ó–∞–ø—É—Å–∫       ===
# ============================

async def main():
    dp.include_router(router)
    await set_bot_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
