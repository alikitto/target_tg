import os
import asyncio
import aiohttp
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, BotCommand, BotCommandScopeDefault
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
META_TOKEN = os.getenv("META_ACCESS_TOKEN")
API_VERSION = "v19.0"
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()

sent_messages_by_chat = {}

# ============================
# ===         API          ===
# ============================
async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None):
    params = params or {}
    params["access_token"] = META_TOKEN
    async with session.get(url, params=params) as response:
        response.raise_for_status()
        return await response.json()

async def get_ad_accounts(session: aiohttp.ClientSession):
    url = f"https://graph.facebook.com/{API_VERSION}/me/adaccounts"
    params = {"fields": "name,account_id"}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_campaigns(session: aiohttp.ClientSession, account_id: str):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/campaigns"
    params = {"fields": "id,name,status,objective", "limit": 500}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_all_adsets(session: aiohttp.ClientSession, account_id: str):
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/adsets"
    params = {"fields": "id,name,campaign_id,status", "limit": 500}
    data = await fb_get(session, url, params)
    return data.get("data", [])

# ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏
async def get_all_ads_with_creatives(session: aiohttp.ClientSession, account_id: str, active_adset_ids: list):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø —Å –∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏."""
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/ads"
    filtering = [
        {'field': 'adset.id', 'operator': 'IN', 'value': active_adset_ids},
        {'field': 'effective_status', 'operator': 'IN', 'value': ['ACTIVE']}
    ]
    params = {
        "fields": "id,name,adset_id,campaign_id,creative{thumbnail_url}",
        "filtering": json.dumps(filtering),
        "limit": 1000
    }
    data = await fb_get(session, url, params)
    return data.get("data", [])

# ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async def get_ad_level_insights(session: aiohttp.ClientSession, account_id: str, ad_ids: list):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."""
    start_date = "2025-06-01"
    end_date = datetime.now().strftime("%Y-%m-%d")
    ad_ids_json_string = json.dumps(ad_ids)
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "ad_id,spend,actions,ctr",
        "level": "ad",
        "filtering": f'[{{"field":"ad.id","operator":"IN","value":{ad_ids_json_string}}}]',
        "time_range": f'{{"since":"{start_date}","until":"{end_date}"}}',
        "limit": 1000
    }
    data = await fb_get(session, url, params)
    return data.get("data", [])


# ============================
# ===      –ü–æ–º–æ—â–Ω–∏–∫–∏       ===
# ============================
def cpl_label(cpl: float) -> str:
    if cpl <= 1: return "üü¢ –î–µ—à—ë–≤—ã–π"
    if cpl <= 3: return "üü° –°—Ä–µ–¥–Ω–∏–π"
    return "üî¥ –î–æ—Ä–æ–≥–æ–π"

async def send_and_store(message: Message | CallbackQuery, text: str, *, is_persistent: bool = False, **kwargs):
    msg_obj = message.message if isinstance(message, CallbackQuery) else message
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å —á–∞—Ç
    kwargs.setdefault('disable_web_page_preview', True)
    msg = await msg_obj.answer(text, **kwargs)
    chat_id = msg.chat.id
    if chat_id not in sent_messages_by_chat:
        sent_messages_by_chat[chat_id] = []
    sent_messages_by_chat[chat_id].append({"id": msg.message_id, "persistent": is_persistent})
    return msg

# ============================
# ===         –ú–µ–Ω—é         ===
# ============================
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        BotCommand(command="report", description="üìä –û—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º"),
        BotCommand(command="clear", description="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())

def inline_main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –û—Ç—á—ë—Ç: –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="build_report")
    kb.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="clear_chat")
    kb.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    kb.adjust(1)
    return kb.as_markup()

# ============================
# ===       –•–µ–Ω–¥–ª–µ—Ä—ã       ===
# ============================
@router.message(Command("start", "restart"))
async def start_handler(msg: Message):
    await send_and_store(msg, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", is_persistent=True, reply_markup=inline_main_menu())

@router.callback_query(F.data == "show_menu")
async def show_menu_handler(call: CallbackQuery):
    await call.message.edit_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_main_menu())
    chat_id = call.message.chat.id
    if chat_id in sent_messages_by_chat:
        for msg_info in sent_messages_by_chat[chat_id]:
            if msg_info["id"] == call.message.message_id:
                msg_info["persistent"] = True
                break

@router.message(Command("help"))
@router.callback_query(F.data == "help")
async def help_handler(event: Message | CallbackQuery):
    help_text = (
        "<b>‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "<b>/start</b> - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "<b>/report</b> - –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º.\n"
        "<b>/clear</b> - –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç—á—ë—Ç—ã, —Å—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏), –æ—Å—Ç–∞–≤–∏–≤ –º–µ–Ω—é –∏ –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API Facebook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
    )
    await send_and_store(event, help_text, is_persistent=True, reply_markup=inline_main_menu())

@router.message(Command("clear"))
@router.callback_query(F.data == "clear_chat")
async def clear_chat_handler(event: Message | CallbackQuery):
    message = event.message if isinstance(event, CallbackQuery) else event
    chat_id = message.chat.id
    if chat_id in sent_messages_by_chat and sent_messages_by_chat[chat_id]:
        messages_to_delete = [msg_info["id"] for msg_info in sent_messages_by_chat[chat_id] if not msg_info.get("persistent", False)]
        sent_messages_by_chat[chat_id] = [msg_info for msg_info in sent_messages_by_chat[chat_id] if msg_info.get("persistent", False)]
        count = 0
        for msg_id in messages_to_delete:
            try:
                await bot.delete_message(chat_id, msg_id)
                count += 1
            except TelegramBadRequest:
                pass
        await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –£–¥–∞–ª–∏–ª {count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
    else:
        await message.answer("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.")
    if isinstance(event, CallbackQuery):
        await start_handler(message)

# ============ –û—Ç—á—ë—Ç —Å –ª–æ–∞–¥–µ—Ä–æ–º ============
@router.message(Command("report"))
@router.callback_query(F.data == "build_report")
async def build_report(event: Message | CallbackQuery):
    message = event.message if isinstance(event, CallbackQuery) else event
    status_msg = await send_and_store(message, "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
    all_accounts_data = {}
    
    timeout = aiohttp.ClientTimeout(total=120)
    
    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            accounts = await get_ad_accounts(session)
            if not accounts:
                await status_msg.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                return

            total = len(accounts)
            for idx, acc in enumerate(accounts, start=1):
                base_text = f"üì¶({idx}/{total}) –ö–∞–±–∏–Ω–µ—Ç: <b>{acc['name']}</b>\n"
                
                try:
                    await status_msg.edit_text(base_text + " C–∫–∞—á–∏–≤–∞—é –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –≥—Ä—É–ø–ø—ã...")
                    campaigns = await get_campaigns(session, acc["account_id"])
                    campaigns_map = {c['id']: c for c in campaigns}
                    
                    adsets = await get_all_adsets(session, acc["account_id"])
                    active_adsets = [a for a in adsets if a.get("status") == "ACTIVE"]
                    if not active_adsets: continue
                    adsets_map = {a['id']: a for a in active_adsets}
                    active_adset_ids = list(adsets_map.keys())

                    await status_msg.edit_text(base_text + " C–∫–∞—á–∏–≤–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
                    ads = await get_all_ads_with_creatives(session, acc["account_id"], active_adset_ids)
                    if not ads: continue
                    
                    ad_ids = [ad['id'] for ad in ads]
                    await status_msg.edit_text(base_text + f" C–∫–∞—á–∏–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
                    insights = await get_ad_level_insights(session, acc["account_id"], ad_ids)
                    
                    insights_map = {}
                    for row in insights:
                        ad_id = row['ad_id']
                        spend = float(row.get("spend", 0))
                        leads = sum(int(a["value"]) for a in row.get("actions", []) if a.get("action_type") == LEAD_ACTION_TYPE)
                        ctr = float(row.get("ctr", 0))
                        insights_map[ad_id] = {"spend": spend, "leads": leads, "ctr": ctr}

                    # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    account_data = {}
                    for ad in ads:
                        ad_id = ad['id']
                        adset_id = ad['adset_id']
                        campaign_id = ad.get('campaign_id')

                        if adset_id not in adsets_map or campaign_id not in campaigns_map:
                            continue

                        stats = insights_map.get(ad_id)
                        if not stats or (stats['spend'] == 0 and stats['leads'] == 0):
                            continue
                        
                        cpl = (stats['spend'] / stats['leads']) if stats['leads'] > 0 else 0
                        
                        if campaign_id not in account_data:
                            campaign_obj = campaigns_map[campaign_id]
                            objective_clean = campaign_obj.get("objective", "N/A").replace('OUTCOME_', '').replace('_', ' ').capitalize()
                            account_data[campaign_id] = {
                                "name": campaign_obj['name'],
                                "objective": objective_clean,
                                "adsets": {}
                            }
                        
                        if adset_id not in account_data[campaign_id]['adsets']:
                            adset_obj = adsets_map[adset_id]
                            account_data[campaign_id]['adsets'][adset_id] = {
                                "name": adset_obj['name'],
                                "ads": []
                            }
                        
                        ad_info = {
                            "name": ad['name'],
                            "thumbnail_url": ad.get('creative', {}).get('thumbnail_url'),
                            "cpl": cpl,
                            "ctr": stats['ctr'],
                            "leads": stats['leads'],
                            "spend": stats['spend']
                        }
                        account_data[campaign_id]['adsets'][adset_id]['ads'].append(ad_info)

                    if account_data:
                        all_accounts_data[acc['name']] = account_data

                except asyncio.TimeoutError:
                    await send_and_store(message, f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç</b> –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–±–∏–Ω–µ—Ç–∞ <b>{acc['name']}</b>. –ü—Ä–æ–ø—É—Å–∫–∞—é –µ–≥–æ.")
                    continue
    
    except aiohttp.ClientResponseError as e:
        error_details = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏"
        if e.content_type == 'application/json':
            try: error_details = (await e.json()).get("error", {}).get("message", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            except: pass
        else: error_details = e.reason
        await status_msg.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞ API Facebook:</b>\n–ö–æ–¥: {e.status}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {error_details}")
        return
    except Exception as e:
        await status_msg.edit_text(f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:</b>\n{type(e).__name__}: {e}")
        return
        
    if not all_accounts_data:
        await status_msg.edit_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –∏–ª–∏ –ª–∏–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    try: await bot.delete_message(status_msg.chat.id, status_msg.message_id)
    except TelegramBadRequest: pass

    # ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞
    for acc_name, campaigns_data in all_accounts_data.items():
        active_campaign_count = len(campaigns_data)
        msg_lines = [
            f"<b>üè¢ –†–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b> <u>{acc_name}</u>",
            f"<b>üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π:</b> {active_campaign_count}",
            "‚îÄ" * 20
        ]
        
        for camp_id, camp_data in campaigns_data.items():
            msg_lines.append(f"\n<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è:</b> {camp_data['name']}")
            
            for adset_id, adset_data in camp_data['adsets'].items():
                # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã
                total_leads = sum(ad['leads'] for ad in adset_data['ads'])
                total_spend = sum(ad['spend'] for ad in adset_data['ads'])
                total_cpl = (total_spend / total_leads) if total_leads > 0 else 0
                
                adset_block = [
                    f"  <b>‚Ü≥ –ì—Ä—É–ø–ø–∞:</b> <code>{adset_data['name']}</code>",
                    f"    - <b>–¶–µ–ª—å:</b> {camp_data['objective']}",
                    f"    - <b>–õ–∏–¥—ã:</b> {total_leads}",
                    f"    - <b>–†–∞—Å—Ö–æ–¥:</b> ${total_spend:.2f}",
                    f"    - <b>CPL:</b> ${total_cpl:.2f} {cpl_label(total_cpl)}"
                ]
                msg_lines.extend(adset_block)
                
                if adset_data['ads']:
                    msg_lines.append("  <b>‚Ü≥ –û–±—ä—è–≤–ª–µ–Ω–∏—è:</b>")
                    for ad in sorted(adset_data['ads'], key=lambda x: x['cpl']):
                        thumb_url = ad.get('thumbnail_url', '#')
                        ad_line = f'    <a href="{thumb_url}">üñºÔ∏è</a> <b>{ad["name"]}</b> | CPL: ${ad["cpl"]:.2f} | CTR: {ad["ctr"]:.2f}%'
                        msg_lines.append(ad_line)

        await send_and_store(message, "\n".join(msg_lines))

    await send_and_store(message, "‚úÖ –û—Ç—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", is_persistent=True, reply_markup=inline_main_menu())

# ============================
# ===         –ó–∞–ø—É—Å–∫       ===
# ============================
async def main():
    dp.include_router(router)
    await set_bot_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
