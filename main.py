–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞.

–í–æ—Ç –ø–æ–ª–Ω—ã–π, –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π `main.py`.

### –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:

1.  **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:** `requests` –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ `httpx` –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤, —á—Ç–æ –∏—Å–∫–ª—é—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–æ—Ç–∞.
2.  **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:** –î–æ–±–∞–≤–ª–µ–Ω—ã –±–ª–æ–∫–∏ `try-except` –≤–æ–∫—Ä—É–≥ –≤—ã–∑–æ–≤–æ–≤ API. –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É, –±–æ—Ç –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è, –∞ —Å–æ–æ–±—â–∏—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É.
3.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å:** –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é `process_account`, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á–∏—â–µ.
4.  **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º:** –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –º–µ—Å—Ç–∞—Ö, –≥–¥–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, CPL \> X –∏–ª–∏ –ª–∏–¥–æ–≤ = 0 –ø—Ä–∏ —Ä–∞—Å—Ö–æ–¥–µ \> Y) –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

-----

### –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ `main.py`

```python
import os
import asyncio
import httpx # üëà –ó–∞–º–µ–Ω–∞ requests
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, BotCommand
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
META_TOKEN = os.getenv("META_ACCESS_TOKEN")
if not TELEGRAM_TOKEN or not META_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å TELEGRAM_BOT_TOKEN –∏ META_ACCESS_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()
http_client = httpx.AsyncClient() # üëà –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sent_messages = []

# ============================
# === –ë–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —Å Meta API ===
# ============================

async def fb_get(url: str, params: dict = None) -> dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Meta Graph API."""
    params = params or {}
    params["access_token"] = META_TOKEN
    try:
        r = await http_client.get(url, params=params, timeout=30.0)
        r.raise_for_status()
        return r.json()
    except httpx.HTTPStatusError as e:
        # –û—à–∏–±–∫–∞ –æ—Ç API (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –ø—Ä–∞–≤, –Ω–µ–≤–µ—Ä–Ω—ã–π ID)
        print(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API Meta: {e.response.status_code} - {e.response.text}")
        return {"error": f"API Error: {e.response.status_code}"}
    except httpx.RequestError as e:
        # –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ—Ä–≤–µ—Ä, —Ç–∞–π–º–∞—É—Ç)
        print(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Meta API: {e}")
        return {"error": f"Network Error: {e}"}

async def get_ad_accounts() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    data = await fb_get("https://graph.facebook.com/v19.0/me/adaccounts", {"fields": "name,account_id"})
    return data.get("data", [])

async def get_active_campaigns(account_id: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
    params = {
        "fields": "id,name,status,objective",
        "filtering": '[{"field":"status","operator":"IN","value":["ACTIVE"]}]',
        "limit": 500
    }
    data = await fb_get(f"https://graph.facebook.com/v19.0/act_{account_id}/campaigns", params)
    return {c["id"]: c for c in data.get("data", [])}

async def get_active_adsets(account_id: str, campaign_ids: list) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Å–µ—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π."""
    if not campaign_ids:
        return []
    params = {
        "fields": "id,name,campaign_id,status",
        "filtering": f'[{{"field":"status","operator":"IN","value":["ACTIVE"]}}, {{"field":"campaign_id","operator":"IN","value":{campaign_ids}}}]',
        "limit": 500
    }
    data = await fb_get(f"https://graph.facebook.com/v19.0/act_{account_id}/adsets", params)
    return data.get("data", [])

async def get_adset_insights(account_id: str, adset_ids: list) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (insights) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∞–¥—Å–µ—Ç–æ–≤."""
    if not adset_ids:
        return []
    params = {
        "fields": "adset_id,spend,actions",
        "level": "adset",
        "filtering": f'[{{"field":"adset.id","operator":"IN","value":{adset_ids}}}]',
        "limit": 500
    }
    data = await fb_get(f"https://graph.facebook.com/v19.0/act_{account_id}/insights", params)
    return data.get("data", [])

# ============================
# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
# ============================

def cpl_label(cpl: float) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É –¥–ª—è CPL."""
    if cpl <= 1:
        return "üü¢ –î–µ—à—ë–≤—ã–π"
    if cpl <= 3:
        return "üü° –°—Ä–µ–¥–Ω–∏–π"
    return "üî¥ –î–æ—Ä–æ–≥–æ–π"

async def send_and_store(message: Message, text: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏."""
    msg = await message.answer(text, **kwargs)
    sent_messages.append(msg.message_id)
    return msg

# ============================
# === –ú–µ–Ω—é –∏ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
# ============================

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞."""
    commands = [
        BotCommand(command="report", description="–û—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º"),
        BotCommand(command="clear", description="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"),
        BotCommand(command="restart", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(commands)

def inline_main_menu() -> InlineKeyboardBuilder.as_markup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –û—Ç—á—ë—Ç: –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="build_report")
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ AI-–∞–Ω–∞–ª–∏–∑–∞
    # kb.button(text="ü§ñ AI –ê–Ω–∞–ª–∏–∑", callback_data="ai_analysis")
    # kb.button(text="üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications_settings")
    kb.button(text="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")
    kb.button(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot")
    kb.button(text="–ü–æ–º–æ—â—å", callback_data="help")
    kb.adjust(1) # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return kb.as_markup()

# ============================
# === –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ ===
# ============================

async def process_account(acc: dict) -> dict | None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ä–µ–∫–ª–∞–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: —Å–æ–±–∏—Ä–∞–µ—Ç –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    account_id = acc["account_id"]
    active_campaigns = await get_active_campaigns(account_id)
    if not active_campaigns:
        return None

    active_adsets = await get_active_adsets(account_id, list(active_campaigns.keys()))
    if not active_adsets:
        return None

    adset_ids = [a["id"] for a in active_adsets]
    insights = await get_adset_insights(account_id, adset_ids)

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    spend_map = {row["adset_id"]: float(row.get("spend", 0)) for row in insights}
    chats_map = {
        row["adset_id"]: sum(
            int(a["value"]) for a in row.get("actions", [])
            if a["action_type"] == "onsite_conversion.messaging_conversation_started_7d"
        )
        for row in insights
    }
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    campaigns_data = {}
    for adset in active_adsets:
        campaign_id = adset["campaign_id"]
        campaign = active_campaigns[campaign_id]
        
        spend = spend_map.get(adset["id"], 0)
        leads = chats_map.get(adset["id"], 0)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥—Å–µ—Ç—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if spend == 0 and leads == 0:
            continue

        cpl = (spend / leads) if leads > 0 else 0
        adset_data = {
            "name": adset["name"],
            "objective": campaign.get("objective", ""),
            "cpl": cpl,
            "leads": leads,
            "spend": spend
        }
        
        # üëá –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –±—É–¥—É—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        # if spend > 10 and leads == 0:
        #     adset_data['alert'] = "–ë–æ–ª—å—à–æ–π —Ä–∞—Å—Ö–æ–¥ –±–µ–∑ –ª–∏–¥–æ–≤!"
        # if cpl > 5:
        #     adset_data['alert'] = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –∑–∞ –ª–∏–¥!"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–¥—Å–µ—Ç—ã –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
        if campaign_id not in campaigns_data:
            campaigns_data[campaign_id] = {"name": campaign["name"], "adsets": []}
        campaigns_data[campaign_id]["adsets"].append(adset_data)
        
    if not campaigns_data:
        return None
        
    return {
        "name": acc["name"],
        "campaigns": list(campaigns_data.values()),
        "active_count": len(campaigns_data)
    }

# ============================
# === –•–µ–Ω–¥–ª–µ—Ä—ã (Handlers) ===
# ============================

@router.message(Command("start"))
async def start_handler(msg: Message):
    await send_and_store(msg, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π Meta. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_main_menu())

# ... (—Ö–µ–Ω–¥–ª–µ—Ä—ã clear, restart, help –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
@router.message(Command("clear"))
@router.callback_query(F.data == "clear_chat")
async def clear_chat_handler(event: Message | CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –æ—á–∏—Å—Ç–∫–∞
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
    message = event if isinstance(event, Message) else event.message
    for msg_id in sent_messages:
        try:
            await bot.delete_message(message.chat.id, msg_id)
        except:
            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏ —Ç.–¥.)
    sent_messages.clear()
    await message.answer("–ß–∞—Ç –æ—á–∏—â–µ–Ω.")


@router.message(Command("report"))
@router.callback_query(F.data == "build_report")
async def build_report_handler(event: Message | CallbackQuery):
    message = event if isinstance(event, Message) else event.message
    if isinstance(event, CallbackQuery):
        await event.answer("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
    
    status_msg = await send_and_store(message, "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")

    accounts = await get_ad_accounts()
    if not accounts:
        await status_msg.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    total = len(accounts)
    all_accounts_data = []

    for idx, acc in enumerate(accounts, start=1):
        await status_msg.edit_text(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–±–∏–Ω–µ—Ç {idx}/{total}\n<b>{acc['name']}</b>")
        account_data = await process_account(acc)
        if account_data:
            all_accounts_data.append(account_data)
        await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API

    if not all_accounts_data:
        await status_msg.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –∏–ª–∏ –ª–∏–¥–∞–º–∏.")
        return

    await status_msg.edit_text("üìä <b>–û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!</b>\n–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
    await asyncio.sleep(1)
    await bot.delete_message(status_msg.chat.id, status_msg.message_id) # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    for acc_data in all_accounts_data:
        msg_lines = [
            f"<b>üè¢ –†–µ–∫–ª. –∫–∞–±–∏–Ω–µ—Ç:</b> <u>{acc_data['name']}</u>",
            f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {acc_data['active_count']}\n"
        ]
        for camp in acc_data["campaigns"]:
            msg_lines.append(f"üéØ <b>{camp['name']}</b>")
            for adset in camp["adsets"]:
                status_emoji = "üü¢" if adset["leads"] > 0 else "üî¥"
                msg_lines.append(
                    f"{status_emoji} <b>{adset['name']}</b>\n"
                    f"  –¶–µ–ª—å: {adset['objective']}\n"
                    f"  –õ–∏–¥—ã: {adset['leads']} | –†–∞—Å—Ö–æ–¥: ${adset['spend']:.2f}\n"
                    f"  CPL: ${adset['cpl']:.2f} ({cpl_label(adset['cpl'])})"
                )
                # üëá –í—ã–≤–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                # if 'alert' in adset:
                #     msg_lines.append(f"  üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> {adset['alert']}")
            msg_lines.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        await send_and_store(message, "\n".join(msg_lines))
        await asyncio.sleep(0.5) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π

    await send_and_store(message, "‚úÖ –û—Ç—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=inline_main_menu())


# ============================
# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
# ============================

async def on_shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    await http_client.aclose() # üëà –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
    print("–ö–ª–∏–µ–Ω—Ç HTTP –∑–∞–∫—Ä—ã—Ç.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    dp.include_router(router)
    dp.shutdown.register(on_shutdown) # üëà –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ

    await set_bot_commands(bot)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")

```
