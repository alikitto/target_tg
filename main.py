import os
import asyncio
import aiohttp
import json 
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, BotCommand, BotCommandScopeDefault
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
META_TOKEN = os.getenv("META_ACCESS_TOKEN")
API_VERSION = "v19.0"
LEAD_ACTION_TYPE = "onsite_conversion.messaging_conversation_started_7d"
LINK_CLICK_ACTION_TYPE = "link_click"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
sent_messages_by_chat = {}

# ============================
# ===         API          ===
# ============================

async def fb_get(session: aiohttp.ClientSession, url: str, params: dict = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Graph API."""
    params = params or {}
    params["access_token"] = META_TOKEN
    async with session.get(url, params=params) as response:
        response.raise_for_status()
        return await response.json()

async def get_ad_accounts(session: aiohttp.ClientSession):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    url = f"https://graph.facebook.com/{API_VERSION}/me/adaccounts"
    params = {"fields": "name,account_id"}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_campaigns(session: aiohttp.ClientSession, account_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/campaigns"
    params = {"fields": "id,name,status,objective", "limit": 500}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_all_adsets(session: aiohttp.ClientSession, account_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/adsets"
    params = {"fields": "id,name,campaign_id,status", "limit": 500}
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_all_ads_with_creatives(session: aiohttp.ClientSession, account_id: str, active_adset_ids: list):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø —Å –∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏."""
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/ads"
    filtering = [
        {'field': 'adset.id', 'operator': 'IN', 'value': active_adset_ids},
        {'field': 'effective_status', 'operator': 'IN', 'value': ['ACTIVE']}
    ]
    params = {
        "fields": "id,name,adset_id,campaign_id,creative{thumbnail_url}",
        "filtering": json.dumps(filtering),
        "limit": 1000
    }
    data = await fb_get(session, url, params)
    return data.get("data", [])

async def get_ad_level_insights(session: aiohttp.ClientSession, account_id: str, ad_ids: list, date_preset: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    url = f"https://graph.facebook.com/{API_VERSION}/act_{account_id}/insights"
    params = {
        "fields": "ad_id,spend,actions,ctr",
        "level": "ad",
        "filtering": f'[{{"field":"ad.id","operator":"IN","value":{ad_ids}}}]',
        "date_preset": date_preset,
        "limit": 1000
    }
    data = await fb_get(session, url, params)
    return data.get("data", [])


# ============================
# ===      –ü–æ–º–æ—â–Ω–∏–∫–∏       ===
# ============================

def cpl_label(value: float, metric: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É –¥–ª—è CPL –∏–ª–∏ CPC."""
    if metric == "cpc":
        if value <= 0.1: return "üü¢ –î–µ—à—ë–≤—ã–π"
        if value <= 0.3: return "üü° –°—Ä–µ–¥–Ω–∏–π"
        return "üî¥ –î–æ—Ä–æ–≥–æ–π"
    # CPL
    if value <= 1: return "üü¢ –î–µ—à—ë–≤—ã–π"
    if value <= 3: return "üü° –°—Ä–µ–¥–Ω–∏–π"
    return "üî¥ –î–æ—Ä–æ–≥–æ–π"

async def send_and_store(message: Message | CallbackQuery, text: str, *, is_persistent: bool = False, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏."""
    msg_obj = message.message if isinstance(message, CallbackQuery) else message
    kwargs.setdefault('disable_web_page_preview', True)
    msg = await msg_obj.answer(text, **kwargs)
    chat_id = msg.chat.id
    if chat_id not in sent_messages_by_chat:
        sent_messages_by_chat[chat_id] = []
    sent_messages_by_chat[chat_id].append({"id": msg.message_id, "persistent": is_persistent})
    return msg

# ============================
# ===         –ú–µ–Ω—é         ===
# ============================

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram."""
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        BotCommand(command="report", description="üìä –û—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º"),
        BotCommand(command="clear", description="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"),
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())

def inline_main_menu():
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –û—Ç—á—ë—Ç: –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="report_period_select")
    kb.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="clear_chat")
    kb.adjust(1)
    return kb.as_markup()

def inline_period_menu():
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á—ë—Ç–∞."""
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="build_report:today")
    kb.button(text="–í—á–µ—Ä–∞", callback_data="build_report:yesterday")
    kb.button(text="–ó–∞ 7 –¥–Ω–µ–π", callback_data="build_report:last_7d")
    kb.button(text="–ó–∞ 30 –¥–Ω–µ–π", callback_data="build_report:last_30d")
    kb.button(text="–° 1 –∏—é–Ω—è 2025", callback_data="build_report:from_june_1")
    kb.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="show_menu")
    kb.adjust(2, 2, 1, 1)
    return kb.as_markup()

# ============================
# ===       –•–µ–Ω–¥–ª–µ—Ä—ã       ===
# ============================

@router.message(Command("start", "restart"))
async def start_handler(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await send_and_store(msg, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", is_persistent=True, reply_markup=inline_main_menu())

@router.callback_query(F.data == "show_menu")
async def show_menu_handler(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await call.message.edit_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_main_menu())

@router.callback_query(F.data == "report_period_select")
async def report_period_select_handler(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞."""
    await call.message.edit_text("üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=inline_period_menu())


@router.message(Command("clear"))
@router.callback_query(F.data == "clear_chat")
async def clear_chat_handler(event: Message | CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤—è–ª—è—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ (–º–µ–Ω—é)."""
    message = event.message if isinstance(event, CallbackQuery) else event
    chat_id = message.chat.id
    
    if chat_id in sent_messages_by_chat and sent_messages_by_chat[chat_id]:
        messages_to_delete = [msg_info["id"] for msg_info in sent_messages_by_chat[chat_id] if not msg_info.get("persistent")]
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_messages_by_chat[chat_id] = [msg_info for msg_info in sent_messages_by_chat[chat_id] if msg_info.get("persistent")]
        
        count = 0
        for msg_id in messages_to_delete:
            try:
                await bot.delete_message(chat_id, msg_id)
                count += 1
            except TelegramBadRequest:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        
        status_msg = await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –£–¥–∞–ª–∏–ª {count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id, status_msg.message_id)
    else:
        status_msg = await message.answer("‚ÑπÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id, status_msg.message_id)

    if isinstance(event, CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
        await event.answer()


# ============ –û—Ç—á—ë—Ç —Å –ª–æ–∞–¥–µ—Ä–æ–º ============
@router.callback_query(F.data.startswith("build_report:"))
async def build_report_handler(call: CallbackQuery):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞."""
    date_preset = call.data.split(":")[1]
    
    # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã "–° 1 –∏—é–Ω—è 2025"
    if date_preset == "from_june_1":
        start_date = "2025-06-01"
        end_date = datetime.now().strftime('%Y-%m-%d')
        time_range = f'{{"since":"{start_date}","until":"{end_date}"}}'
    else:
        time_range = None # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ date_preset

    await call.message.edit_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{date_preset}</b>...")
    status_msg = await send_and_store(call, "–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ API...")

    all_accounts_data = {}
    timeout = aiohttp.ClientTimeout(total=180) # –£–≤–µ–ª–∏—á–∏–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç

    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            accounts = await get_ad_accounts(session)
            if not accounts:
                await status_msg.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                return

            total = len(accounts)
            for idx, acc in enumerate(accounts, start=1):
                base_text = f"üì¶({idx}/{total}) –ö–∞–±–∏–Ω–µ—Ç: <b>{acc['name']}</b>\n"
                
                try:
                    await status_msg.edit_text(base_text + " C–∫–∞—á–∏–≤–∞—é –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –≥—Ä—É–ø–ø—ã...")
                    campaigns = await get_campaigns(session, acc["account_id"])
                    campaigns_map = {c['id']: c for c in campaigns}
                    
                    adsets = await get_all_adsets(session, acc["account_id"])
                    active_adsets = [a for a in adsets if a.get("status") == "ACTIVE"]
                    if not active_adsets: continue
                    
                    adsets_map = {a['id']: a for a in active_adsets}
                    active_adset_ids = list(adsets_map.keys())

                    await status_msg.edit_text(base_text + " C–∫–∞—á–∏–≤–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
                    ads = await get_all_ads_with_creatives(session, acc["account_id"], active_adset_ids)
                    if not ads: continue
                    
                    ad_ids = [ad['id'] for ad in ads]
                    await status_msg.edit_text(base_text + f" C–∫–∞—á–∏–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {len(ad_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
                    
                    # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Ñ—É–Ω–∫—Ü–∏—é
                    insights_params = {"account_id": acc["account_id"], "ad_ids": ad_ids}
                    if time_range:
                        insights_params["date_preset"] = None # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º preset –µ—Å–ª–∏ –µ—Å—Ç—å time_range
                        # –î–æ–±–∞–≤–ª—è–µ–º time_range –≤ —Å–∞–º –∑–∞–ø—Ä–æ—Å –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                        url = f"https://graph.facebook.com/{API_VERSION}/act_{acc['account_id']}/insights"
                        params = {
                            "fields": "ad_id,spend,actions,ctr", "level": "ad",
                            "filtering": f'[{{"field":"ad.id","operator":"IN","value":{ad_ids}}}]',
                            "time_range": time_range, "limit": 1000
                        }
                        insights_data = await fb_get(session, url, params)
                        insights = insights_data.get("data", [])
                    else:
                        insights_params["date_preset"] = date_preset
                        insights = await get_ad_level_insights(session, **insights_params)

                    insights_map = {}
                    for row in insights:
                        ad_id = row['ad_id']
                        spend = float(row.get("spend", 0))
                        leads = sum(int(a["value"]) for a in row.get("actions", []) if a.get("action_type") == LEAD_ACTION_TYPE)
                        clicks = sum(int(a["value"]) for a in row.get("actions", []) if a.get("action_type") == LINK_CLICK_ACTION_TYPE)
                        ctr = float(row.get("ctr", 0))
                        insights_map[ad_id] = {"spend": spend, "leads": leads, "clicks": clicks, "ctr": ctr}

                    account_data = {}
                    for ad in ads:
                        ad_id = ad['id']
                        adset_id = ad['adset_id']
                        campaign_id = ad.get('campaign_id')

                        if adset_id not in adsets_map or campaign_id not in campaigns_map:
                            continue

                        stats = insights_map.get(ad_id)
                        if not stats or stats['spend'] == 0:
                            continue
                        
                        campaign_obj = campaigns_map[campaign_id]
                        objective = campaign_obj.get("objective", "N/A")

                        if campaign_id not in account_data:
                            objective_clean = objective.replace('OUTCOME_', '').replace('_', ' ').capitalize()
                            account_data[campaign_id] = {
                                "name": campaign_obj['name'],
                                "objective": objective_clean,
                                "adsets": {}
                            }
                        
                        if adset_id not in account_data[campaign_id]['adsets']:
                            adset_obj = adsets_map[adset_id]
                            account_data[campaign_id]['adsets'][adset_id] = {
                                "name": adset_obj['name'],
                                "ads": []
                            }
                        
                        ad_info = {
                            "name": ad['name'],
                            "thumbnail_url": ad.get('creative', {}).get('thumbnail_url'),
                            "spend": stats['spend'],
                            "ctr": stats['ctr'],
                            "objective": objective
                        }

                        if "TRAFFIC" in ad_info["objective"]:
                            ad_info["clicks"] = stats["clicks"]
                            ad_info["cpc"] = (stats['spend'] / stats['clicks']) if stats['clicks'] > 0 else 0
                        else:
                            ad_info["leads"] = stats["leads"]
                            ad_info["cpl"] = (stats['spend'] / stats['leads']) if stats['leads'] > 0 else 0

                        account_data[campaign_id]['adsets'][adset_id]['ads'].append(ad_info)

                    if account_data:
                        all_accounts_data[acc['name']] = account_data

                except asyncio.TimeoutError:
                    await send_and_store(call, f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç</b> –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–±–∏–Ω–µ—Ç–∞ <b>{acc['name']}</b>. –ü—Ä–æ–ø—É—Å–∫–∞—é –µ–≥–æ.")
                    continue
    
    except aiohttp.ClientResponseError as e:
        error_details = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏"
        if e.content_type == 'application/json':
            try: error_details = (await e.json()).get("error", {}).get("message", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            except: pass
        else: error_details = e.reason
        await status_msg.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞ API Facebook:</b>\n–ö–æ–¥: {e.status}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {error_details}")
        return
    except Exception as e:
        await status_msg.edit_text(f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:</b>\n{type(e).__name__}: {e}")
        return
        
    if not all_accounts_data:
        await status_msg.edit_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await asyncio.sleep(5)
        await show_menu_handler(call)
        return
    
    try: await bot.delete_message(status_msg.chat.id, status_msg.message_id)
    except TelegramBadRequest: pass

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞
    for acc_name, campaigns_data in all_accounts_data.items():
        active_campaign_count = len(campaigns_data)
        msg_lines = [
            f"<b>üè¢ –†–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b> <u>{acc_name}</u>",
            f"<b>üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π:</b> {active_campaign_count}",
            "‚îÄ" * 20
        ]
        
        for camp_id, camp_data in campaigns_data.items():
            msg_lines.append(f"\n<b>üéØ –ö–∞–º–ø–∞–Ω–∏—è:</b> {camp_data['name']}")
            
            for adset_id, adset_data in camp_data['adsets'].items():
                total_spend = sum(ad['spend'] for ad in adset_data['ads'])
                
                adset_block = [f"  <b>‚Ü≥ –ì—Ä—É–ø–ø–∞:</b> <code>{adset_data['name']}</code>"]
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
                if "TRAFFIC" in adset_data['ads'][0]["objective"]:
                    total_clicks = sum(ad['clicks'] for ad in adset_data['ads'])
                    total_cpc = (total_spend / total_clicks) if total_clicks > 0 else 0
                    adset_block.append(f"    - <b>–¶–µ–ª—å:</b> {camp_data['objective']}")
                    adset_block.append(f"    - <b>–ö–ª–∏–∫–∏:</b> {total_clicks}")
                    adset_block.append(f"    - <b>–†–∞—Å—Ö–æ–¥:</b> ${total_spend:.2f}")
                    adset_block.append(f"    - <b>CPC:</b> ${total_cpc:.2f} {cpl_label(total_cpc, 'cpc')}")
                else:
                    total_leads = sum(ad['leads'] for ad in adset_data['ads'])
                    total_cpl = (total_spend / total_leads) if total_leads > 0 else 0
                    adset_block.append(f"    - <b>–¶–µ–ª—å:</b> {camp_data['objective']}")
                    adset_block.append(f"    - <b>–õ–∏–¥—ã:</b> {total_leads}")
                    adset_block.append(f"    - <b>–†–∞—Å—Ö–æ–¥:</b> ${total_spend:.2f}")
                    adset_block.append(f"    - <b>CPL:</b> ${total_cpl:.2f} {cpl_label(total_cpl, 'cpl')}")

                msg_lines.extend(adset_block)
                
                if adset_data['ads']:
                    msg_lines.append("  <b>‚Ü≥ –û–±—ä—è–≤–ª–µ–Ω–∏—è:</b>")
                    
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
                    sort_key = 'cpc' if "TRAFFIC" in adset_data['ads'][0]["objective"] else 'cpl'
                    sorted_ads = sorted(adset_data['ads'], key=lambda x: x.get(sort_key, float('inf')))

                    for ad in sorted_ads:
                        thumb_url = ad.get('thumbnail_url', '#')
                        if "TRAFFIC" in ad["objective"]:
                            ad_line = f'    <a href="{thumb_url}">üñºÔ∏è</a> <b>{ad["name"]}</b> | CPC: ${ad["cpc"]:.2f} | CTR: {ad["ctr"]:.2f}%'
                        else:
                            ad_line = f'    <a href="{thumb_url}">üñºÔ∏è</a> <b>{ad["name"]}</b> | CPL: ${ad["cpl"]:.2f} | CTR: {ad["ctr"]:.2f}%'
                        msg_lines.append(ad_line)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º –±–æ–ª—å—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        final_report = "\n".join(msg_lines)
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(final_report) > 4096:
            for x in range(0, len(final_report), 4096):
                await send_and_store(call, final_report[x:x+4096])
        else:
            await send_and_store(call, final_report)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.edit_text("‚úÖ –û—Ç—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_main_menu())


# ============================
# ===         –ó–∞–ø—É—Å–∫       ===
# ============================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    dp.include_router(router)
    await set_bot_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
